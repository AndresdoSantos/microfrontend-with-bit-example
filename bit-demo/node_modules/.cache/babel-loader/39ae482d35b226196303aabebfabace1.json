{"ast":null,"code":"\"use strict\";require(\"core-js/modules/es.array.iterator.js\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.ComponentMap=void 0;/**\n * allows to index components -> values.\n */class ComponentMap{constructor(hashMap){this.hashMap=hashMap;}/**\n   * @deprecated please use `get` instead\n   */byComponent(component){return this.hashMap.get(component.id.toString());}get components(){return this.toArray().map(([component])=>component);}/**\n   * get a value for a component.\n   */get(component){return this.hashMap.get(component.id.toString());}/**\n   * get a value by the component-id\n   */getValueByComponentId(componentId){const tuple=this.hashMap.get(componentId.toString());if(!tuple)return null;return tuple[1];}/**\n   * returns an array.\n   */toArray(){return Array.from(this.hashMap.values());}/**\n   * map entries and return a new component map.\n   */map(predicate){const tuples=this.toArray().map(([component,value])=>{const newValue=predicate(value,component);return[component.id.toString(),[component,newValue]];});return new ComponentMap(new Map(tuples));}/**\n   * similar to Array.forEach, but here you get both, the value and the component.\n   */forEach(predicate){this.toArray().forEach(([component,value])=>{predicate(value,component);});}/**\n   * flatten values of all components into a single array.\n   */flattenValue(){return this.toArray().reduce((acc,[,value])=>{acc=acc.concat(value);return acc;},[]);}/**\n   * filter all components with empty values and return a new map.\n   */filter(predicate){const tuples=this.toArray().filter(([,value])=>{return predicate(value);});const asMap=tuples.map(([component,value])=>{return[component.id.toString(),[component,value]];});return new ComponentMap(new Map(asMap));}/**\n   * get all component ids.\n   */keys(){return this.hashMap.keys();}static create(rawMap){const newMap=rawMap.map(([component,data])=>{return[component.id.toString(),[component,data]];});return new ComponentMap(new Map(newMap));}/**\n   * create a component map from components and a value predicate.\n   * @param components components to zip into the map.\n   * @param predicate predicate for returning desired value.\n   */static as(components,predicate){const tuples=components.map(component=>{return[component.id.toString(),[component,predicate(component)]];});return new ComponentMap(new Map(tuples));}}exports.ComponentMap=ComponentMap;","map":null,"metadata":{},"sourceType":"module"}