{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.genericNodeToJson=exports.genericParseNode=exports.Node=void 0;const lodash_1=require(\"lodash\");const lodash_2=__importDefault(require(\"lodash\"));class Node{constructor(id,attr,inEdges,outEdges){this.id=id;this.attr=attr;this._inEdges=inEdges||[];this._outEdges=outEdges||[];}setInEdge(edgeId){this._inEdges.push(edgeId);}setOutEdge(edgeId){this._outEdges.push(edgeId);}deleteEdge(edgeId){lodash_2.default.remove(this._inEdges,function(edge){return edge===edgeId;});lodash_2.default.remove(this._outEdges,function(edge){return edge===edgeId;});}get inEdges(){return this._inEdges;}get outEdges(){return this._outEdges;}get nodeEdges(){return this._inEdges.concat(this._outEdges);}/**\n     * return true if node doesn't have any out edges\n     */hasNoSuccessors(){return this._outEdges.length===0;}/**\n     * return true if node doesn't have any in edges\n     */hasNoPredecessors(){return this._inEdges.length===0;}/**\n     * return true if node has only out edges\n     */isSource(){return this._inEdges.length===0&&this._outEdges.length>0;}/**\n     * return true if node has only in edges\n     */isSink(){return this._inEdges.length>0&&this._outEdges.length===0;}equals(node){if(this.id!==node.id)return false;return(0,lodash_1.isEqual)(this.attr,node.attr);}stringify(){let attrStr='';//@ts-ignore\nif(!!this.attr['stringify']&&typeof this.attr['stringify']==='function'){//@ts-ignore\nattrStr=this.attr.stringify();}else{attrStr=JSON.stringify(this.attr);}return attrStr;}static fromObject(obj,parseNode){if(!obj.hasOwnProperty('id')){throw Error('missing object id');}return new Node(obj.id,parseNode(obj.attr));}}exports.Node=Node;function genericParseNode(nodeAttr){if(typeof nodeAttr!=='string'){return nodeAttr;}const parsed=JSON.parse(nodeAttr);return parsed;}exports.genericParseNode=genericParseNode;function genericNodeToJson(node){return node;}exports.genericNodeToJson=genericNodeToJson;","map":null,"metadata":{},"sourceType":"module"}