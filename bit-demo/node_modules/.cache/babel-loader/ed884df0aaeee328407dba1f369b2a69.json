{"ast":null,"code":"\"use strict\";var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.useComponentArtifacts=void 0;const client_1=require(\"@apollo/client\");const ui_foundation_ui_hooks_use_data_query_1=require(\"@teambit/ui-foundation.ui.hooks.use-data-query\");const component_ui_artifacts_models_component_artifacts_model_1=require(\"@teambit/component.ui.artifacts.models.component-artifacts-model\");const ARTIFACTS_QUERY=(0,client_1.gql)`\n  query ComponentArtifacts($id: String!, $extensionId: String!) {\n    getHost(id: $extensionId) {\n      id # used for GQL caching\n      get(id: $id) {\n        id {\n          name\n          version\n          scope\n        }\n        pipelineReport {\n          id\n          taskId\n          taskName\n          artifact {\n            id\n            name\n            description\n            files {\n              id\n              name\n              path\n              downloadUrl\n            }\n          }\n        }\n      }\n    }\n  }\n`;function useComponentArtifacts(host,componentId){var _a,_b;const _c=(0,ui_foundation_ui_hooks_use_data_query_1.useDataQuery)(ARTIFACTS_QUERY,{variables:{id:componentId,extensionId:host}}),{data}=_c,rest=__rest(_c,[\"data\"]);const artifacts=(0,component_ui_artifacts_models_component_artifacts_model_1.mapToArtifacts)(((_b=(_a=data===null||data===void 0?void 0:data.getHost)===null||_a===void 0?void 0:_a.get)===null||_b===void 0?void 0:_b.pipelineReport)||[]);return Object.assign(Object.assign({},rest),{data:artifacts});}exports.useComponentArtifacts=useComponentArtifacts;","map":null,"metadata":{},"sourceType":"module"}