{"ast":null,"code":"import isPromise from'./isPromise';/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */export default function promiseReduce(values,callback,initialValue){return values.reduce(function(previous,value){return isPromise(previous)?previous.then(function(resolved){return callback(resolved,value);}):callback(previous,value);},initialValue);}","map":null,"metadata":{},"sourceType":"module"}