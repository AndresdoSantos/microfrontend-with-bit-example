{"ast":null,"code":"'use strict';var has=Object.prototype.hasOwnProperty,undef;/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */function decode(input){try{return decodeURIComponent(input.replace(/\\+/g,' '));}catch(e){return null;}}/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */function encode(input){try{return encodeURIComponent(input);}catch(e){return null;}}/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */function querystring(query){var parser=/([^=?#&]+)=?([^&]*)/g,result={},part;while(part=parser.exec(query)){var key=decode(part[1]),value=decode(part[2]);//\n// Prevent overriding of existing properties. This ensures that build-in\n// methods like `toString` or __proto__ are not overriden by malicious\n// querystrings.\n//\n// In the case if failed decoding, we want to omit the key/value pairs\n// from the result.\n//\nif(key===null||value===null||key in result)continue;result[key]=value;}return result;}/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */function querystringify(obj,prefix){prefix=prefix||'';var pairs=[],value,key;//\n// Optionally prefix with a '?' if needed\n//\nif('string'!==typeof prefix)prefix='?';for(key in obj){if(has.call(obj,key)){value=obj[key];//\n// Edge cases where we actually want to encode the value to an empty\n// string instead of the stringified value.\n//\nif(!value&&(value===null||value===undef||isNaN(value))){value='';}key=encode(key);value=encode(value);//\n// If we failed to encode the strings, we should bail out as we don't\n// want to add invalid strings to the query.\n//\nif(key===null||value===null)continue;pairs.push(key+'='+value);}}return pairs.length?prefix+pairs.join('&'):'';}//\n// Expose the module.\n//\nexports.stringify=querystringify;exports.parse=querystring;","map":null,"metadata":{},"sourceType":"module"}