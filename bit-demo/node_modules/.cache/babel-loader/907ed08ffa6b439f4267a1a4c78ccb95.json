{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */'use strict';function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}import{AnimatedEvent}from'./AnimatedEvent';import AnimatedProps from'./nodes/AnimatedProps';import React from'react';import invariant from'fbjs/lib/invariant';import mergeRefs from'../../../modules/mergeRefs';function createAnimatedComponent(Component,defaultProps){invariant(typeof Component!=='function'||Component.prototype&&Component.prototype.isReactComponent,'`createAnimatedComponent` does not support stateless functional components; '+'use a class component instead.');var AnimatedComponent=/*#__PURE__*/function(_React$Component){_inheritsLoose(AnimatedComponent,_React$Component);function AnimatedComponent(props){var _this;_this=_React$Component.call(this,props)||this;_this._invokeAnimatedPropsCallbackOnMount=false;_this._eventDetachers=[];_this._animatedPropsCallback=function(){if(_this._component==null){// AnimatedProps is created in will-mount because it's used in render.\n// But this callback may be invoked before mount in async mode,\n// In which case we should defer the setNativeProps() call.\n// React may throw away uncommitted work in async mode,\n// So a deferred call won't always be invoked.\n_this._invokeAnimatedPropsCallbackOnMount=true;}else if(AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY||typeof _this._component.setNativeProps!=='function'){_this.forceUpdate();}else if(!_this._propsAnimated.__isNative){_this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());}else{throw new Error('Attempting to run JS driven animation on animated '+'node that has been moved to \"native\" earlier by starting an '+'animation with `useNativeDriver: true`');}};_this._setComponentRef=mergeRefs(_this.props.forwardedRef,function(ref){_this._prevComponent=_this._component;_this._component=ref;// TODO: Delete this in a future release.\nif(ref!=null&&ref.getNode==null){ref.getNode=function(){var _ref$constructor$name;console.warn('%s: Calling `getNode()` on the ref of an Animated component '+'is no longer necessary. You can now directly use the ref '+'instead. This method will be removed in a future release.',(_ref$constructor$name=ref.constructor.name)!==null&&_ref$constructor$name!==void 0?_ref$constructor$name:'<<anonymous>>');return ref;};}});return _this;}var _proto=AnimatedComponent.prototype;_proto.componentWillUnmount=function componentWillUnmount(){this._propsAnimated&&this._propsAnimated.__detach();this._detachNativeEvents();};_proto.UNSAFE_componentWillMount=function UNSAFE_componentWillMount(){this._attachProps(this.props);};_proto.componentDidMount=function componentDidMount(){if(this._invokeAnimatedPropsCallbackOnMount){this._invokeAnimatedPropsCallbackOnMount=false;this._animatedPropsCallback();}this._propsAnimated.setNativeView(this._component);this._attachNativeEvents();};_proto._attachNativeEvents=function _attachNativeEvents(){var _this2=this;// Make sure to get the scrollable node for components that implement\n// `ScrollResponder.Mixin`.\nvar scrollableNode=this._component&&this._component.getScrollableNode?this._component.getScrollableNode():this._component;var _loop=function _loop(key){var prop=_this2.props[key];if(prop instanceof AnimatedEvent&&prop.__isNative){prop.__attach(scrollableNode,key);_this2._eventDetachers.push(function(){return prop.__detach(scrollableNode,key);});}};for(var key in this.props){_loop(key);}};_proto._detachNativeEvents=function _detachNativeEvents(){this._eventDetachers.forEach(function(remove){return remove();});this._eventDetachers=[];}// The system is best designed when setNativeProps is implemented. It is\n// able to avoid re-rendering and directly set the attributes that changed.\n// However, setNativeProps can only be implemented on leaf native\n// components. If you want to animate a composite component, you need to\n// re-render it. In this case, we have a fallback that uses forceUpdate.\n;_proto._attachProps=function _attachProps(nextProps){var oldPropsAnimated=this._propsAnimated;this._propsAnimated=new AnimatedProps(nextProps,this._animatedPropsCallback);// When you call detach, it removes the element from the parent list\n// of children. If it goes to 0, then the parent also detaches itself\n// and so on.\n// An optimization is to attach the new elements and THEN detach the old\n// ones instead of detaching and THEN attaching.\n// This way the intermediate state isn't to go to 0 and trigger\n// this expensive recursive detaching to then re-attach everything on\n// the very next operation.\noldPropsAnimated&&oldPropsAnimated.__detach();};_proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(newProps){this._attachProps(newProps);};_proto.componentDidUpdate=function componentDidUpdate(prevProps){if(this._component!==this._prevComponent){this._propsAnimated.setNativeView(this._component);}if(this._component!==this._prevComponent||prevProps!==this.props){this._detachNativeEvents();this._attachNativeEvents();}};_proto.render=function render(){var props=this._propsAnimated.__getValue();return React.createElement(Component,_extends({},defaultProps,props,{ref:this._setComponentRef}));};return AnimatedComponent;}(React.Component);AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY=false;var propTypes=Component.propTypes;return React.forwardRef(function AnimatedComponentWrapper(props,ref){return React.createElement(AnimatedComponent,_extends({},props,ref==null?null:{forwardedRef:ref}));});}export default createAnimatedComponent;","map":null,"metadata":{},"sourceType":"module"}