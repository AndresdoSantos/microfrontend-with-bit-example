{"ast":null,"code":"import inspect from'../jsutils/inspect';import invariant from'../jsutils/invariant';import keyValMap from'../jsutils/keyValMap';import isInvalid from'../jsutils/isInvalid';import{Kind}from'../language/kinds';/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */export function valueFromASTUntyped(valueNode,variables){switch(valueNode.kind){case Kind.NULL:return null;case Kind.INT:return parseInt(valueNode.value,10);case Kind.FLOAT:return parseFloat(valueNode.value);case Kind.STRING:case Kind.ENUM:case Kind.BOOLEAN:return valueNode.value;case Kind.LIST:return valueNode.values.map(function(node){return valueFromASTUntyped(node,variables);});case Kind.OBJECT:return keyValMap(valueNode.fields,function(field){return field.name.value;},function(field){return valueFromASTUntyped(field.value,variables);});case Kind.VARIABLE:{var variableName=valueNode.name.value;return variables&&!isInvalid(variables[variableName])?variables[variableName]:undefined;}}// Not reachable. All possible value nodes have been considered.\n/* istanbul ignore next */invariant(false,'Unexpected value node: '+inspect(valueNode));}","map":null,"metadata":{},"sourceType":"module"}