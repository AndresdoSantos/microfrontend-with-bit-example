{"ast":null,"code":"// The GraphQL query recommended for a full schema introspection.\nexport{// Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery,// @deprecated, use getIntrospectionQuery() - will be removed in v15.\nintrospectionQuery}from'./introspectionQuery';// Gets the target Operation from a Document.\nexport{getOperationAST}from'./getOperationAST';// Gets the Type for the target Operation AST.\nexport{getOperationRootType}from'./getOperationRootType';// Convert a GraphQLSchema to an IntrospectionQuery.\nexport{introspectionFromSchema}from'./introspectionFromSchema';// Build a GraphQLSchema from an introspection result.\nexport{buildClientSchema}from'./buildClientSchema';// Build a GraphQLSchema from GraphQL Schema language.\nexport{buildASTSchema,buildSchema,// @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16.\ngetDescription}from'./buildASTSchema';// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport{extendSchema}from'./extendSchema';// Sort a GraphQLSchema.\nexport{lexicographicSortSchema}from'./lexicographicSortSchema';// Print a GraphQLSchema to GraphQL Schema language.\nexport{printSchema,printType,printIntrospectionSchema}from'./schemaPrinter';// Create a GraphQLType from a GraphQL language AST.\nexport{typeFromAST}from'./typeFromAST';// Create a JavaScript value from a GraphQL language AST with a type.\nexport{valueFromAST}from'./valueFromAST';// Create a JavaScript value from a GraphQL language AST without a type.\nexport{valueFromASTUntyped}from'./valueFromASTUntyped';// Create a GraphQL language AST from a JavaScript value.\nexport{astFromValue}from'./astFromValue';// A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nexport{TypeInfo}from'./TypeInfo';// Coerces a JavaScript value to a GraphQL type, or produces errors.\nexport{coerceInputValue}from'./coerceInputValue';// @deprecated use coerceInputValue - will be removed in v15.\nexport{coerceValue}from'./coerceValue';// @deprecated use coerceInputValue - will be removed in v15.\nexport{isValidJSValue}from'./isValidJSValue';// @deprecated use validation - will be removed in v15\nexport{isValidLiteralValue}from'./isValidLiteralValue';// Concatenates multiple AST together.\nexport{concatAST}from'./concatAST';// Separates an AST into an AST per Operation.\nexport{separateOperations}from'./separateOperations';// Strips characters that are not significant to the validity or execution\n// of a GraphQL document.\nexport{stripIgnoredCharacters}from'./stripIgnoredCharacters';// Comparators for types\nexport{isEqualType,isTypeSubTypeOf,doTypesOverlap}from'./typeComparators';// Asserts that a string is a valid GraphQL name\nexport{assertValidName,isValidNameError}from'./assertValidName';// Compares two GraphQLSchemas and detects breaking changes.\nexport{BreakingChangeType,DangerousChangeType,findBreakingChanges,findDangerousChanges}from'./findBreakingChanges';// Report all deprecated usage within a GraphQL document.\nexport{findDeprecatedUsages}from'./findDeprecatedUsages';","map":null,"metadata":{},"sourceType":"module"}