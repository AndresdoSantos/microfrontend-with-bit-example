{"ast":null,"code":"\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;Object.defineProperty(o,k2,{enumerable:true,get:function(){return m[k];}});}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.FileTree=void 0;const react_1=__importStar(require(\"react\"));const base_ui_graph_tree_inflate_paths_1=require(\"@teambit/base-ui.graph.tree.inflate-paths\");const base_ui_graph_tree_tree_context_1=require(\"@teambit/base-ui.graph.tree.tree-context\");const base_ui_graph_tree_indent_1=require(\"@teambit/base-ui.graph.tree.indent\");const base_ui_graph_tree_root_node_1=require(\"@teambit/base-ui.graph.tree.root-node\");const base_ui_graph_tree_recursive_tree_1=require(\"@teambit/base-ui.graph.tree.recursive-tree\");const file_tree_node_1=require(\"./file-tree.node\");const file_tree_context_1=require(\"./file-tree.context\");/**\n * Renders a tree of folders and files from an array of file path's\n */function FileTree(_a){var{files,onTreeNodeSelected,selected,getIcon,getHref,widgets,payloadMap,TreeNode:CustomTreeNode=file_tree_node_1.FileTreeNode}=_a,rest=__rest(_a,[\"files\",\"onTreeNodeSelected\",\"selected\",\"getIcon\",\"getHref\",\"widgets\",\"payloadMap\",\"TreeNode\"]);const rootNode=(0,react_1.useMemo)(()=>{// make sure that Windows paths are converted to posix\nconst filePaths=files.map(f=>f.replace(/\\\\/g,'/'));const tree=(0,base_ui_graph_tree_inflate_paths_1.inflateToTree)(filePaths,c=>c);payloadMap&&(0,base_ui_graph_tree_inflate_paths_1.attachPayload)(tree,payloadMap);return tree;},[files]);return react_1.default.createElement(\"div\",Object.assign({style:Object.assign(Object.assign({},(0,base_ui_graph_tree_indent_1.indentStyle)(1)),rest.style)},rest),react_1.default.createElement(file_tree_context_1.FileTreeContext.Provider,{value:{getIcon,getHref,widgets}},react_1.default.createElement(base_ui_graph_tree_recursive_tree_1.TreeNodeContext.Provider,{value:CustomTreeNode},react_1.default.createElement(base_ui_graph_tree_tree_context_1.TreeContextProvider,{onSelect:onTreeNodeSelected,selected:selected},react_1.default.createElement(base_ui_graph_tree_root_node_1.RootNode,{node:rootNode,depth:1})))));}exports.FileTree=FileTree;","map":null,"metadata":{},"sourceType":"module"}