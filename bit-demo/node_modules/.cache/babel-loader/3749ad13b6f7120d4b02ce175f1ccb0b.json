{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */'use strict';import invariant from'fbjs/lib/invariant';/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */var EventSubscriptionVendor=/*#__PURE__*/function(){function EventSubscriptionVendor(){this._subscriptionsForType={};this._currentSubscription=null;}/**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */var _proto=EventSubscriptionVendor.prototype;_proto.addSubscription=function addSubscription(eventType,subscription){invariant(subscription.subscriber===this,'The subscriber of the subscription is incorrectly set.');if(!this._subscriptionsForType[eventType]){this._subscriptionsForType[eventType]=[];}var key=this._subscriptionsForType[eventType].length;this._subscriptionsForType[eventType].push(subscription);subscription.eventType=eventType;subscription.key=key;return subscription;}/**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */;_proto.removeAllSubscriptions=function removeAllSubscriptions(eventType){if(eventType===undefined){this._subscriptionsForType={};}else{delete this._subscriptionsForType[eventType];}}/**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */;_proto.removeSubscription=function removeSubscription(subscription){var eventType=subscription.eventType;var key=subscription.key;var subscriptionsForType=this._subscriptionsForType[eventType];if(subscriptionsForType){delete subscriptionsForType[key];}}/**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */;_proto.getSubscriptionsForType=function getSubscriptionsForType(eventType){return this._subscriptionsForType[eventType];};return EventSubscriptionVendor;}();export default EventSubscriptionVendor;","map":null,"metadata":{},"sourceType":"module"}