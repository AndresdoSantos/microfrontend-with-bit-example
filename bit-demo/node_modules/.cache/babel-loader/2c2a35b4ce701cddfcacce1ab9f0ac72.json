{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */'use strict';import InteractionManager from'../../../exports/InteractionManager';/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */var Batchinator=/*#__PURE__*/function(){function Batchinator(callback,delayMS){this._delay=delayMS;this._callback=callback;}/*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */var _proto=Batchinator.prototype;_proto.dispose=function dispose(options){if(options===void 0){options={abort:false};}if(this._taskHandle){this._taskHandle.cancel();if(!options.abort){this._callback();}this._taskHandle=null;}};_proto.schedule=function schedule(){var _this=this;if(this._taskHandle){return;}var timeoutHandle=setTimeout(function(){_this._taskHandle=InteractionManager.runAfterInteractions(function(){// Note that we clear the handle before invoking the callback so that if the callback calls\n// schedule again, it will actually schedule another task.\n_this._taskHandle=null;_this._callback();});},this._delay);this._taskHandle={cancel:function cancel(){return clearTimeout(timeoutHandle);}};};return Batchinator;}();export default Batchinator;","map":null,"metadata":{},"sourceType":"module"}