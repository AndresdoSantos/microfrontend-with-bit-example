{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */var slice=Array.prototype.slice;/**\n * Order-based insertion of CSS.\n *\n * Each rule is associated with a numerically defined group.\n * Groups are ordered within the style sheet according to their number, with the\n * lowest first.\n *\n * Groups are implemented using marker rules. The selector of the first rule of\n * each group is used only to encode the group number for hydration. An\n * alternative implementation could rely on CSSMediaRule, allowing groups to be\n * treated as a sub-sheet, but the Edge implementation of CSSMediaRule is\n * broken.\n * https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule\n * https://gist.github.com/necolas/aa0c37846ad6bd3b05b727b959e82674\n */export default function createOrderedCSSStyleSheet(sheet){var groups={};var selectors={};/**\n   * Hydrate approximate record from any existing rules in the sheet.\n   */if(sheet!=null){var group;slice.call(sheet.cssRules).forEach(function(cssRule,i){var cssText=cssRule.cssText;// Create record of existing selectors and rules\nif(cssText.indexOf('stylesheet-group')>-1){group=decodeGroupRule(cssRule);groups[group]={start:i,rules:[cssText]};}else{var selectorText=getSelectorText(cssText);if(selectorText!=null){selectors[selectorText]=true;groups[group].rules.push(cssText);}}});}function sheetInsert(sheet,group,text){var orderedGroups=getOrderedGroups(groups);var groupIndex=orderedGroups.indexOf(group);var nextGroupIndex=groupIndex+1;var nextGroup=orderedGroups[nextGroupIndex];// Insert rule before the next group, or at the end of the stylesheet\nvar position=nextGroup!=null&&groups[nextGroup].start!=null?groups[nextGroup].start:sheet.cssRules.length;var isInserted=insertRuleAt(sheet,text,position);if(isInserted){// Set the starting index of the new group\nif(groups[group].start==null){groups[group].start=position;}// Increment the starting index of all subsequent groups\nfor(var i=nextGroupIndex;i<orderedGroups.length;i+=1){var groupNumber=orderedGroups[i];var previousStart=groups[groupNumber].start;groups[groupNumber].start=previousStart+1;}}return isInserted;}var OrderedCSSStyleSheet={/**\n     * The textContent of the style sheet.\n     */getTextContent:function getTextContent(){return getOrderedGroups(groups).map(function(group){var rules=groups[group].rules;return rules.join('\\n');}).join('\\n');},/**\n     * Insert a rule into the style sheet\n     */insert:function insert(cssText,groupValue){var group=Number(groupValue);// Create a new group.\nif(groups[group]==null){var markerRule=encodeGroupRule(group);// Create the internal record.\ngroups[group]={start:null,rules:[markerRule]};// Update CSSOM.\nif(sheet!=null){sheetInsert(sheet,group,markerRule);}}// selectorText is more reliable than cssText for insertion checks. The\n// browser excludes vendor-prefixed properties and rewrites certain values\n// making cssText more likely to be different from what was inserted.\nvar selectorText=getSelectorText(cssText);if(selectorText!=null&&selectors[selectorText]==null){// Update the internal records.\nselectors[selectorText]=true;groups[group].rules.push(cssText);// Update CSSOM.\nif(sheet!=null){var isInserted=sheetInsert(sheet,group,cssText);if(!isInserted){// Revert internal record change if a rule was rejected (e.g.,\n// unrecognized pseudo-selector)\ngroups[group].rules.pop();}}}}};return OrderedCSSStyleSheet;}/**\n * Helper functions\n */function encodeGroupRule(group){return\"[stylesheet-group=\\\"\"+group+\"\\\"]{}\";}function decodeGroupRule(cssRule){return Number(cssRule.selectorText.split(/[\"']/)[1]);}function getOrderedGroups(obj){return Object.keys(obj).map(Number).sort(function(a,b){return a>b?1:-1;});}var pattern=/\\s*([,])\\s*/g;function getSelectorText(cssText){var selector=cssText.split('{')[0].trim();return selector!==''?selector.replace(pattern,'$1'):null;}function insertRuleAt(root,cssText,position){try{// $FlowFixMe: Flow is missing CSSOM types needed to type 'root'.\nroot.insertRule(cssText,position);return true;}catch(e){// JSDOM doesn't support `CSSSMediaRule#insertRule`.\n// Also ignore errors that occur from attempting to insert vendor-prefixed selectors.\nreturn false;}}","map":null,"metadata":{},"sourceType":"module"}