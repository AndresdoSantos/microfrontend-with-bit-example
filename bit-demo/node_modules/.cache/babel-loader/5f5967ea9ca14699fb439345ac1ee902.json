{"ast":null,"code":"\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;Object.defineProperty(o,k2,{enumerable:true,get:function(){return m[k];}});}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.NativeNavLink=void 0;const react_1=__importStar(require(\"react\"));const classnames_1=__importDefault(require(\"classnames\"));const base_ui_routing_native_link_1=require(\"@teambit/base-ui.routing.native-link\");const base_ui_routing_compare_url_1=require(\"@teambit/base-ui.routing.compare-url\");const base_ui_utils_is_browser_1=require(\"@teambit/base-ui.utils.is-browser\");/**\n * A special version of the `<NativeLink/>` that will add styles to the rendered element when it matches the current URL.\n * Used to provide default fallbacks for react-router link\n */function NativeNavLink(_a){var{activeClassName,activeStyle,isActive,exact,strict,style,className}=_a,rest=__rest(_a,[\"activeClassName\",\"activeStyle\",\"isActive\",\"exact\",\"strict\",\"style\",\"className\"]);// TODO - consider using getLocation()\nconst activeHref=base_ui_utils_is_browser_1.isBrowser?window.location.href:'/';const isDefaultActive=react_1.useMemo(()=>rest.href&&base_ui_routing_compare_url_1.compareUrl(activeHref,rest.href),[exact,strict,activeHref,rest.href]);const calcIsActive=(isActive===null||isActive===void 0?void 0:isActive())||isDefaultActive;const combinedStyles=react_1.useMemo(()=>calcIsActive&&activeStyle?Object.assign(Object.assign({},style),activeStyle):style,[calcIsActive,style]);return react_1.default.createElement(base_ui_routing_native_link_1.NativeLink,Object.assign({},rest,{style:combinedStyles,className:classnames_1.default(className,calcIsActive&&activeClassName)}));}exports.NativeNavLink=NativeNavLink;","map":null,"metadata":{},"sourceType":"module"}