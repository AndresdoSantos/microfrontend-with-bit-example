{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.ComponentID=void 0;const legacy_bit_id_1=require(\"@teambit/legacy-bit-id\");const exceptions_1=require(\"./exceptions\");class ComponentID{constructor(/**\n     * legacy bit component id\n     */legacyComponentId,_scope){this.legacyComponentId=legacyComponentId;this._scope=_scope;}/**\n     * An access to the legacy id. DO NOT USE THIS\n     *\n     * @readonly\n     * @memberof ComponentID\n     */get _legacy(){return this.legacyComponentId;}/**\n     * determine whether ID has a version.\n     */hasVersion(){return this._legacy.hasVersion();}/**\n     * resolves the version of the component ID.\n     */get version(){return this.legacyComponentId.version;}get namespace(){const arr=this.legacyComponentId.name.split('/');return arr.slice(0,-1).join('/');}/**\n     * retrieves the full name of the component including its namespace.\n     */get fullName(){return this._legacy.name;}/**\n     * resolves the name of the component.\n     */get name(){const arr=this.legacyComponentId.name.split('/');return arr[arr.length-1];}/**\n     * return the scope if included in the ID.\n     */get scope(){const scope=this._legacy.scope;if(scope)return scope;if(!this._scope)throw new Error('scope cannot be undefined');return this._scope;}/**\n     * get a new component ID instance with given scope.\n     */changeScope(scopeName){const legacyId=this._legacy.changeScope(scopeName);return ComponentID.fromLegacy(legacyId);}changeVersion(version){const legacyId=this._legacy.changeVersion(version);return ComponentID.fromLegacy(legacyId,this.scope);}isEqual(id,opts){return ComponentID.isEqual(this,id,opts);}/**\n     * examples:\n     * 1.0.0 => null\n     * 1.0.0-dev.1 => ['dev', 1]\n     * 1.0.0-dev.1.alpha.2 => ['dev', 1, 'alpha', 2]\n     * 1.0.0-0 => [0]\n     */getVersionPreReleaseData(){return this._legacy.getVersionPreReleaseData();}/**\n     * serialize a component ID without its version.\n     */toStringWithoutVersion(){let id=this._legacy;if(this._scope&&!this._legacy.scope){id=id.changeScope(this._scope);}return id.toStringWithoutVersion();}/**\n     * serialize the component ID.\n     */toString(opts={}){let id=this._legacy;if(this._scope&&!this._legacy.scope){id=id.changeScope(this._scope);}const idStr=id.toString(false,opts.ignoreVersion);if(opts.fsCompatible)return idStr.replace(/\\//g,'_').replace(/\\./g,'_').replace(/-/g,'_');return idStr;}toObject(){const object=this.legacyComponentId.serialize();if(!object.scope){object.scope=this.scope;}// TODO - TS does not realize object.scope now has a value\nreturn object;}/**\n     * generate a component ID from a string. Returns undefined if input is malformed\n     */static tryFromString(idStr,scope){try{return ComponentID.fromString(idStr,scope);}catch(_a){return undefined;}}/**\n     * generate a component ID from a string.\n     */static fromString(idStr,scope){const legacyId=legacy_bit_id_1.BitId.parse(idStr,true);if(!scope&&!legacyId.scope)throw new exceptions_1.MissingScope(idStr);return new ComponentID(legacyId,scope);}/**\n     * @deprecated\n     * please make sure not to use this function. it is deprecated and its usage is forbidden\n     * and could potentially cause many different bugs across the system.\n     */static fromLegacyString(idStr,scope){const legacyId=legacy_bit_id_1.BitId.parse(idStr,false);return new ComponentID(legacyId,scope);}/** deserialize a componnet id from raw object */static fromObject(object,scope){return ComponentID.fromLegacy(new legacy_bit_id_1.BitId(object),scope);}/**\n     * check if object can be correctly deserialized to be a ComponentID\n     */static isValidObject(o){return typeof o==='object'&&typeof o.name==='string'&&typeof o.scope==='string';// consider validating values with regex\n}static isEqual(a,b,opts={}){if(!a&&!b)return true;if(!a||!b)return false;let result=a.scope===b.scope&&a.toString({ignoreVersion:opts.ignoreVersion})===b.toString({ignoreVersion:opts.ignoreVersion});if(!opts.ignoreVersion){result=result&&a.version===b.version;}return result;}static isEqualObj(a,b,opts={}){if(!a&&!b)return true;if(!a||!b)return false;let result=a.scope===b.scope&&a.name===b.name;if(!opts.ignoreVersion){result=result&&a.version===b.version;}return result;}/**\n     * create a `ComponentID` instance from the legacy `BitId`.\n     */static fromLegacy(legacyId,scope){if(!scope&&!legacyId.scope)throw new exceptions_1.MissingScope(legacyId);return new ComponentID(legacyId,scope);}static sortIds(ids){return ids.sort((a,b)=>a.toString().localeCompare(b.toString()));}}exports.ComponentID=ComponentID;","map":null,"metadata":{},"sourceType":"module"}