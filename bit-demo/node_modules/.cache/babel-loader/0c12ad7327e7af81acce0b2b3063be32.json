{"ast":null,"code":"var _a=Object.prototype,toString=_a.toString,hasOwnProperty=_a.hasOwnProperty;var fnToStr=Function.prototype.toString;var previousComparisons=new Map();/**\r\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\r\n */function equal(a,b){try{return check(a,b);}finally{previousComparisons.clear();}}function check(a,b){// If the two values are strictly equal, our job is easy.\nif(a===b){return true;}// Object.prototype.toString returns a representation of the runtime type of\n// the given value that is considerably more precise than typeof.\nvar aTag=toString.call(a);var bTag=toString.call(b);// If the runtime types of a and b are different, they could maybe be equal\n// under some interpretation of equality, but for simplicity and performance\n// we just return false instead.\nif(aTag!==bTag){return false;}switch(aTag){case'[object Array]':// Arrays are a lot like other objects, but we can cheaply compare their\n// lengths as a short-cut before comparing their elements.\nif(a.length!==b.length)return false;// Fall through to object case...\ncase'[object Object]':{if(previouslyCompared(a,b))return true;var aKeys=definedKeys(a);var bKeys=definedKeys(b);// If `a` and `b` have a different number of enumerable keys, they\n// must be different.\nvar keyCount=aKeys.length;if(keyCount!==bKeys.length)return false;// Now make sure they have the same keys.\nfor(var k=0;k<keyCount;++k){if(!hasOwnProperty.call(b,aKeys[k])){return false;}}// Finally, check deep equality of all child properties.\nfor(var k=0;k<keyCount;++k){var key=aKeys[k];if(!check(a[key],b[key])){return false;}}return true;}case'[object Error]':return a.name===b.name&&a.message===b.message;case'[object Number]':// Handle NaN, which is !== itself.\nif(a!==a)return b!==b;// Fall through to shared +a === +b case...\ncase'[object Boolean]':case'[object Date]':return+a===+b;case'[object RegExp]':case'[object String]':return a==\"\".concat(b);case'[object Map]':case'[object Set]':{if(a.size!==b.size)return false;if(previouslyCompared(a,b))return true;var aIterator=a.entries();var isMap=aTag==='[object Map]';while(true){var info=aIterator.next();if(info.done)break;// If a instanceof Set, aValue === aKey.\nvar _a=info.value,aKey=_a[0],aValue=_a[1];// So this works the same way for both Set and Map.\nif(!b.has(aKey)){return false;}// However, we care about deep equality of values only when dealing\n// with Map structures.\nif(isMap&&!check(aValue,b.get(aKey))){return false;}}return true;}case'[object Uint16Array]':case'[object Uint8Array]':// Buffer, in Node.js.\ncase'[object Uint32Array]':case'[object Int32Array]':case'[object Int8Array]':case'[object Int16Array]':case'[object ArrayBuffer]':// DataView doesn't need these conversions, but the equality check is\n// otherwise the same.\na=new Uint8Array(a);b=new Uint8Array(b);// Fall through...\ncase'[object DataView]':{var len=a.byteLength;if(len===b.byteLength){while(len--&&a[len]===b[len]){// Keep looping as long as the bytes are equal.\n}}return len===-1;}case'[object AsyncFunction]':case'[object GeneratorFunction]':case'[object AsyncGeneratorFunction]':case'[object Function]':{var aCode=fnToStr.call(a);if(aCode!==fnToStr.call(b)){return false;}// We consider non-native functions equal if they have the same code\n// (native functions require === because their code is censored).\n// Note that this behavior is not entirely sound, since !== function\n// objects with the same code can behave differently depending on\n// their closure scope. However, any function can behave differently\n// depending on the values of its input arguments (including this)\n// and its calling context (including its closure scope), even\n// though the function object is === to itself; and it is entirely\n// possible for functions that are not === to behave exactly the\n// same under all conceivable circumstances. Because none of these\n// factors are statically decidable in JavaScript, JS function\n// equality is not well-defined. This ambiguity allows us to\n// consider the best possible heuristic among various imperfect\n// options, and equating non-native functions that have the same\n// code has enormous practical benefits, such as when comparing\n// functions that are repeatedly passed as fresh function\n// expressions within objects that are otherwise deeply equal. Since\n// any function created from the same syntactic expression (in the\n// same code location) will always stringify to the same code\n// according to fnToStr.call, we can reasonably expect these\n// repeatedly passed function expressions to have the same code, and\n// thus behave \"the same\" (with all the caveats mentioned above),\n// even though the runtime function objects are !== to one another.\nreturn!endsWith(aCode,nativeCodeSuffix);}}// Otherwise the values are not equal.\nreturn false;}function definedKeys(obj){// Remember that the second argument to Array.prototype.filter will be\n// used as `this` within the callback function.\nreturn Object.keys(obj).filter(isDefinedKey,obj);}function isDefinedKey(key){return this[key]!==void 0;}var nativeCodeSuffix=\"{ [native code] }\";function endsWith(full,suffix){var fromIndex=full.length-suffix.length;return fromIndex>=0&&full.indexOf(suffix,fromIndex)===fromIndex;}function previouslyCompared(a,b){// Though cyclic references can make an object graph appear infinite from the\n// perspective of a depth-first traversal, the graph still contains a finite\n// number of distinct object references. We use the previousComparisons cache\n// to avoid comparing the same pair of object references more than once, which\n// guarantees termination (even if we end up comparing every object in one\n// graph to every object in the other graph, which is extremely unlikely),\n// while still allowing weird isomorphic structures (like rings with different\n// lengths) a chance to pass the equality test.\nvar bSet=previousComparisons.get(a);if(bSet){// Return true here because we can be sure false will be returned somewhere\n// else if the objects are not equivalent.\nif(bSet.has(b))return true;}else{previousComparisons.set(a,bSet=new Set());}bSet.add(b);return false;}export{equal as default,equal};","map":null,"metadata":{},"sourceType":"module"}