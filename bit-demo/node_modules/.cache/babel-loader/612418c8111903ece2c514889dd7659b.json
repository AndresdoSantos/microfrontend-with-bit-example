{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */import isSelectionValid from'../../modules/isSelectionValid';var keyName='__reactResponderId';function getEventPath(domEvent){// The 'selectionchange' event always has the 'document' as the target.\n// Use the anchor node as the initial target to reconstruct a path.\n// (We actually only need the first \"responder\" node in practice.)\nif(domEvent.type==='selectionchange'){var target=window.getSelection().anchorNode;return composedPathFallback(target);}else{var path=domEvent.composedPath!=null?domEvent.composedPath():composedPathFallback(domEvent.target);return path;}}function composedPathFallback(target){var path=[];while(target!=null&&target!==document.body){path.push(target);target=target.parentNode;}return path;}/**\n * Retrieve the responderId from a host node\n */function getResponderId(node){if(node!=null){return node[keyName];}return null;}/**\n * Store the responderId on a host node\n */export function setResponderId(node,id){if(node!=null){node[keyName]=id;}}/**\n * Filter the event path to contain only the nodes attached to the responder system\n */export function getResponderPaths(domEvent){var idPath=[];var nodePath=[];var eventPath=getEventPath(domEvent);for(var i=0;i<eventPath.length;i++){var node=eventPath[i];var id=getResponderId(node);if(id!=null){idPath.push(id);nodePath.push(node);}}return{idPath:idPath,nodePath:nodePath};}/**\n * Walk the paths and find the first common ancestor\n */export function getLowestCommonAncestor(pathA,pathB){var pathALength=pathA.length;var pathBLength=pathB.length;if(// If either path is empty\npathALength===0||pathBLength===0||// If the last elements aren't the same there can't be a common ancestor\n// that is connected to the responder system\npathA[pathALength-1]!==pathB[pathBLength-1]){return null;}var itemA=pathA[0];var indexA=0;var itemB=pathB[0];var indexB=0;// If A is deeper, skip indices that can't match.\nif(pathALength-pathBLength>0){indexA=pathALength-pathBLength;itemA=pathA[indexA];pathALength=pathBLength;}// If B is deeper, skip indices that can't match\nif(pathBLength-pathALength>0){indexB=pathBLength-pathALength;itemB=pathB[indexB];pathBLength=pathALength;}// Walk in lockstep until a match is found\nvar depth=pathALength;while(depth--){if(itemA===itemB){return itemA;}itemA=pathA[indexA++];itemB=pathB[indexB++];}return null;}/**\n * Determine whether any of the active touches are within the current responder.\n * This cannot rely on W3C `targetTouches`, as neither IE11 nor Safari implement it.\n */export function hasTargetTouches(target,touches){if(!touches||touches.length===0){return false;}for(var i=0;i<touches.length;i++){var node=touches[i].target;if(node!=null){if(target.contains(node)){return true;}}}return false;}/**\n * Ignore 'selectionchange' events that don't correspond with a person's intent to\n * select text.\n */export function hasValidSelection(domEvent){if(domEvent.type==='selectionchange'){return isSelectionValid();}return domEvent.type==='select';}/**\n * Events are only valid if the primary button was used without specific modifier keys.\n */export function isPrimaryPointerDown(domEvent){var altKey=domEvent.altKey,button=domEvent.button,buttons=domEvent.buttons,ctrlKey=domEvent.ctrlKey,type=domEvent.type;var isTouch=type==='touchstart'||type==='touchmove';var isPrimaryMouseDown=type==='mousedown'&&(button===0||buttons===1);var isPrimaryMouseMove=type==='mousemove'&&buttons===1;var noModifiers=altKey===false&&ctrlKey===false;if(isTouch||isPrimaryMouseDown&&noModifiers||isPrimaryMouseMove&&noModifiers){return true;}return false;}","map":null,"metadata":{},"sourceType":"module"}