{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=MDXContent;var _react=_interopRequireDefault(require(\"react\"));var _react2=require(\"@mdx-js/react\");var _mdxUi=require(\"@teambit/mdx.ui.mdx-scope-context\");var _excluded=[\"components\"];function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var layoutProps={};var MDXLayout=\"wrapper\";function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_react2.mdx)(MDXLayout,_extends({},layoutProps,props,{components:components,mdxType:\"MDXLayout\"}),(0,_react2.mdx)(_mdxUi.MDXScopeProvider,{components:{},mdxType:\"MDXScopeProvider\"},(0,_react2.mdx)(\"h2\",null,\"How to Add Tests\"),(0,_react2.mdx)(\"iframe\",{width:\"560\",height:\"315\",src:\"https://www.youtube.com/embed/R0LWV2gcbf8?rel=0\",title:\"Adding Tests to your component\",frameborder:\"0\",allow:\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",allowfullscreen:true}),(0,_react2.mdx)(\"blockquote\",null,(0,_react2.mdx)(\"p\",{parentName:\"blockquote\"},\"Adding tests to a component is done by creating a file in the component's directory, using \",(0,_react2.mdx)(\"inlineCode\",{parentName:\"p\"},\"*.spec.[ts|tsx|js|jsx]\"),\" or \",(0,_react2.mdx)(\"inlineCode\",{parentName:\"p\"},\"*.test.[ts|tsx|js|jsx]\"),\".\")),(0,_react2.mdx)(\"p\",null,\"The local dev server watches your components for any changes and reruns tests for your component and all its dependents for you.\"),(0,_react2.mdx)(\"pre\",null,(0,_react2.mdx)(\"code\",{parentName:\"pre\",\"className\":\"language-bash{5}\"},\"\\u251C\\u2500\\u2500 ui/button\\n    \\u251C\\u2500\\u2500 index.tsx\\n    \\u251C\\u2500\\u2500 button.spec.tsx\\n    \\u2514\\u2500\\u2500 button.tsx\\n\")),(0,_react2.mdx)(\"p\",null,\"It is highly recommended to use the component compositions as test samples.\"),(0,_react2.mdx)(\"pre\",null,(0,_react2.mdx)(\"code\",{parentName:\"pre\",\"className\":\"language-tsx\",\"metastring\":\"{4} title=\\\"button.tsx\\\"\",\"{4}\":true,\"title\":\"\\\"button.tsx\\\"\"},\"import React from 'react';\\nimport { render } from '@testing-library/react';\\nimport { Button } from './button.composition';\\n\\nit('should render with the correct text', () => {\\n  const { getByText } = render(<BasicButton />);\\n  const rendered = getByText('click me');\\n  expect(rendered).toBeTruthy();\\n});\\n\")),(0,_react2.mdx)(\"p\",null,(0,_react2.mdx)(\"a\",{parentName:\"p\",\"href\":\"https://harmony-docs.bit.dev/building-with-bit/testing-components\"},\"Learn more about testing components.\"))));};MDXContent.isMDXComponent=true;","map":null,"metadata":{},"sourceType":"module"}