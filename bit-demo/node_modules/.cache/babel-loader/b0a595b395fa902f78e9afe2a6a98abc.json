{"ast":null,"code":"const{MAX_SAFE_COMPONENT_LENGTH}=require('./constants');const debug=require('./debug');exports=module.exports={};// The actual regexps go on exports.re\nconst re=exports.re=[];const src=exports.src=[];const t=exports.t={};let R=0;const createToken=(name,value,isGlobal)=>{const index=R++;debug(index,value);t[name]=index;src[index]=value;re[index]=new RegExp(value,isGlobal?'g':undefined);};// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\ncreateToken('NUMERICIDENTIFIER','0|[1-9]\\\\d*');createToken('NUMERICIDENTIFIERLOOSE','[0-9]+');// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\ncreateToken('NONNUMERICIDENTIFIER','\\\\d*[a-zA-Z-][a-zA-Z0-9-]*');// ## Main Version\n// Three dot-separated numeric identifiers.\ncreateToken('MAINVERSION',`(${src[t.NUMERICIDENTIFIER]})\\\\.`+`(${src[t.NUMERICIDENTIFIER]})\\\\.`+`(${src[t.NUMERICIDENTIFIER]})`);createToken('MAINVERSIONLOOSE',`(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.`+`(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.`+`(${src[t.NUMERICIDENTIFIERLOOSE]})`);// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\ncreateToken('PRERELEASEIDENTIFIER',`(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);createToken('PRERELEASEIDENTIFIERLOOSE',`(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\ncreateToken('PRERELEASE',`(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`);createToken('PRERELEASELOOSE',`(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\ncreateToken('BUILDIDENTIFIER','[0-9A-Za-z-]+');// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\ncreateToken('BUILD',`(?:\\\\+(${src[t.BUILDIDENTIFIER]}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`);// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\ncreateToken('FULLPLAIN',`v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);createToken('FULL',`^${src[t.FULLPLAIN]}$`);// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN',`[v=\\\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);createToken('LOOSE',`^${src[t.LOOSEPLAIN]}$`);createToken('GTLT','((?:<|>)?=?)');// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE',`${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`);createToken('XRANGEIDENTIFIER',`${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`);createToken('XRANGEPLAIN',`[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})`+`(?:\\\\.(${src[t.XRANGEIDENTIFIER]})`+`(?:\\\\.(${src[t.XRANGEIDENTIFIER]})`+`(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?`+`)?)?`);createToken('XRANGEPLAINLOOSE',`[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})`+`(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})`+`(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})`+`(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?`+`)?)?`);createToken('XRANGE',`^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`);createToken('XRANGELOOSE',`^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`);// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE',`${'(^|[^\\\\d])'+'(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})`+`(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`+`(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`+`(?:$|[^\\\\d])`);createToken('COERCERTL',src[t.COERCE],true);// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE','(?:~>?)');createToken('TILDETRIM',`(\\\\s*)${src[t.LONETILDE]}\\\\s+`,true);exports.tildeTrimReplace='$1~';createToken('TILDE',`^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);createToken('TILDELOOSE',`^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET','(?:\\\\^)');createToken('CARETTRIM',`(\\\\s*)${src[t.LONECARET]}\\\\s+`,true);exports.caretTrimReplace='$1^';createToken('CARET',`^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);createToken('CARETLOOSE',`^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE',`^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`);createToken('COMPARATOR',`^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`);// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM',`(\\\\s*)${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`,true);exports.comparatorTrimReplace='$1$2$3';// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE',`^\\\\s*(${src[t.XRANGEPLAIN]})`+`\\\\s+-\\\\s+`+`(${src[t.XRANGEPLAIN]})`+`\\\\s*$`);createToken('HYPHENRANGELOOSE',`^\\\\s*(${src[t.XRANGEPLAINLOOSE]})`+`\\\\s+-\\\\s+`+`(${src[t.XRANGEPLAINLOOSE]})`+`\\\\s*$`);// Star ranges basically just allow anything at all.\ncreateToken('STAR','(<|>)?=?\\\\s*\\\\*');// >=0.0.0 is like a star\ncreateToken('GTE0','^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$');createToken('GTE0PRE','^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$');","map":null,"metadata":{},"sourceType":"module"}