{"ast":null,"code":"/* jshint node: true */'use strict';var REGEXP_PARTS=/(\\*|\\?)/g;/**\n  # wildcard\n\n  Very simple wildcard matching, which is designed to provide the same\n  functionality that is found in the\n  [eve](https://github.com/adobe-webplatform/eve) eventing library.\n\n  ## Usage\n\n  It works with strings:\n\n  <<< examples/strings.js\n\n  Arrays:\n\n  <<< examples/arrays.js\n\n  Objects (matching against keys):\n\n  <<< examples/objects.js\n\n  ## Alternative Implementations\n\n  - <https://github.com/isaacs/node-glob>\n\n    Great for full file-based wildcard matching.\n\n  - <https://github.com/sindresorhus/matcher>\n\n     A well cared for and loved JS wildcard matcher.\n**/function WildcardMatcher(text,separator){this.text=text=text||'';this.hasWild=text.indexOf('*')>=0;this.separator=separator;this.parts=text.split(separator).map(this.classifyPart.bind(this));}WildcardMatcher.prototype.match=function(input){var matches=true;var parts=this.parts;var ii;var partsCount=parts.length;var testParts;if(typeof input=='string'||input instanceof String){if(!this.hasWild&&this.text!=input){matches=false;}else{testParts=(input||'').split(this.separator);for(ii=0;matches&&ii<partsCount;ii++){if(parts[ii]==='*'){continue;}else if(ii<testParts.length){matches=parts[ii]instanceof RegExp?parts[ii].test(testParts[ii]):parts[ii]===testParts[ii];}else{matches=false;}}// If matches, then return the component parts\nmatches=matches&&testParts;}}else if(typeof input.splice=='function'){matches=[];for(ii=input.length;ii--;){if(this.match(input[ii])){matches[matches.length]=input[ii];}}}else if(typeof input=='object'){matches={};for(var key in input){if(this.match(key)){matches[key]=input[key];}}}return matches;};WildcardMatcher.prototype.classifyPart=function(part){// in the event that we have been provided a part that is not just a wildcard\n// then turn this into a regular expression for matching purposes\nif(part==='*'){return part;}else if(part.indexOf('*')>=0||part.indexOf('?')>=0){return new RegExp(part.replace(REGEXP_PARTS,'\\.$1'));}return part;};module.exports=function(text,test,separator){var matcher=new WildcardMatcher(text,separator||/[\\/\\.]/);if(typeof test!='undefined'){return matcher.match(test);}return matcher;};","map":null,"metadata":{},"sourceType":"module"}