{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.toPreviewHash=exports.toPreviewServer=exports.toPreviewUrl=void 0;const base_ui_utils_string_affix_1=require(\"@teambit/base-ui.utils.string.affix\");/**\n * generates a full url to a preview (overview / docs etc)\n */function toPreviewUrl(component,previewName,additionalParams){const serverPath=toPreviewServer(component,previewName);const hash=toPreviewHash(component,previewName,additionalParams);return`${serverPath}#${hash}`;}exports.toPreviewUrl=toPreviewUrl;/**\n * generates preview server path from component data\n */function toPreviewServer(component,previewName){var _a,_b;// explicit url is especially important for local workspace, because it's the url of the dev server.\nconst explicitUrl=(_a=component.server)===null||_a===void 0?void 0:_a.url;if(explicitUrl)return explicitUrl;// Checking specifically with === false, to make sure we fallback to the old url\nif(((_b=component.preview)===null||_b===void 0?void 0:_b.includesEnvTemplate)===false){// for example - \"/api/teambit.community/envs/community-react@1.17.0/~aspect/env-template/overview\"\nreturn toEnvTemplatePreviewUrl(component,previewName);}// (legacy)\n// for example - \"/api/teambit.base-ui/input/button@0.6.2/~aspect/preview/\"\nreturn toComponentPreviewUrl(component);}exports.toPreviewServer=toPreviewServer;/**\n * The old URL for components which their bundle contains the env template inside\n * @param component\n * @returns\n */function toComponentPreviewUrl(component){const componentBasedUrl=`/api/${component.id.toString()}/~aspect/preview/`;return componentBasedUrl;}/**\n * Optimized URL when the env template is in separate bundle\n * We fetched it by the env id so we can achieve long term cache of the env template bundles in the browser\n * @param component\n * @param previewName\n * @returns\n */function toEnvTemplatePreviewUrl(component,previewName){var _a;const envId=(_a=component.environment)===null||_a===void 0?void 0:_a.id;// add component id for cache busting,\n// otherwise might have leftovers when switching between components of the same env.\n// This query param is currently not used yet.\nconst search=`compId=${component.id.toString()}`;const envBasedUrl=`/api/${envId}/~aspect/env-template/${previewName}/?${search}`;return envBasedUrl;}/**\n * creates component preview arguments\n */function toPreviewHash(/**\n * component to preview\n */component,/**\n * current preview (docs, compositions, etc)\n */previewName,/**\n * extra data to append to query\n */queryParams=''){const previewParam=(0,base_ui_utils_string_affix_1.affix)(`preview=`,previewName);const hashQuery=[previewParam].concat(queryParams).filter(x=>!!x)// also removes empty strings\n.join('&');const hash=`${component.id.toString()}${(0,base_ui_utils_string_affix_1.affix)('?',hashQuery)}`;return hash;}exports.toPreviewHash=toPreviewHash;","map":null,"metadata":{},"sourceType":"module"}