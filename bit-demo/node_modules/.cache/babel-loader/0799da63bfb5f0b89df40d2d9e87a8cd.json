{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */ /* eslint no-bitwise: 0 */'use strict';function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype);subClass.prototype.constructor=subClass;subClass.__proto__=superClass;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import AnimatedNode from'./AnimatedNode';import AnimatedWithChildren from'./AnimatedWithChildren';import NativeAnimatedHelper from'../NativeAnimatedHelper';import invariant from'fbjs/lib/invariant';import normalizeColor from'normalize-css-color';var linear=function linear(t){return t;};/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */function createInterpolation(config){if(config.outputRange&&typeof config.outputRange[0]==='string'){return createInterpolationFromStringOutputRange(config);}var outputRange=config.outputRange;checkInfiniteRange('outputRange',outputRange);var inputRange=config.inputRange;checkInfiniteRange('inputRange',inputRange);checkValidInputRange(inputRange);invariant(inputRange.length===outputRange.length,'inputRange ('+inputRange.length+') and outputRange ('+outputRange.length+') must have the same length');var easing=config.easing||linear;var extrapolateLeft='extend';if(config.extrapolateLeft!==undefined){extrapolateLeft=config.extrapolateLeft;}else if(config.extrapolate!==undefined){extrapolateLeft=config.extrapolate;}var extrapolateRight='extend';if(config.extrapolateRight!==undefined){extrapolateRight=config.extrapolateRight;}else if(config.extrapolate!==undefined){extrapolateRight=config.extrapolate;}return function(input){invariant(typeof input==='number','Cannot interpolation an input which is not a number');var range=findRange(input,inputRange);return interpolate(input,inputRange[range],inputRange[range+1],outputRange[range],outputRange[range+1],easing,extrapolateLeft,extrapolateRight);};}function interpolate(input,inputMin,inputMax,outputMin,outputMax,easing,extrapolateLeft,extrapolateRight){var result=input;// Extrapolate\nif(result<inputMin){if(extrapolateLeft==='identity'){return result;}else if(extrapolateLeft==='clamp'){result=inputMin;}else if(extrapolateLeft==='extend'){// noop\n}}if(result>inputMax){if(extrapolateRight==='identity'){return result;}else if(extrapolateRight==='clamp'){result=inputMax;}else if(extrapolateRight==='extend'){// noop\n}}if(outputMin===outputMax){return outputMin;}if(inputMin===inputMax){if(input<=inputMin){return outputMin;}return outputMax;}// Input Range\nif(inputMin===-Infinity){result=-result;}else if(inputMax===Infinity){result=result-inputMin;}else{result=(result-inputMin)/(inputMax-inputMin);}// Easing\nresult=easing(result);// Output Range\nif(outputMin===-Infinity){result=-result;}else if(outputMax===Infinity){result=result+outputMin;}else{result=result*(outputMax-outputMin)+outputMin;}return result;}function colorToRgba(input){var int32Color=normalizeColor(input);if(int32Color===null){return input;}int32Color=int32Color||0;var r=(int32Color&0xff000000)>>>24;var g=(int32Color&0x00ff0000)>>>16;var b=(int32Color&0x0000ff00)>>>8;var a=(int32Color&0x000000ff)/255;return\"rgba(\"+r+\", \"+g+\", \"+b+\", \"+a+\")\";}var stringShapeRegex=/[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */function createInterpolationFromStringOutputRange(config){var outputRange=config.outputRange;invariant(outputRange.length>=2,'Bad output range');outputRange=outputRange.map(colorToRgba);checkPattern(outputRange);// ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n// ->\n// [\n//   [0, 50],\n//   [100, 150],\n//   [200, 250],\n//   [0, 0.5],\n// ]\n/* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */var outputRanges=outputRange[0].match(stringShapeRegex).map(function(){return[];});outputRange.forEach(function(value){/* $FlowFixMe(>=0.18.0): `value.match()` can return `null`. Need to guard\n     * against this possibility.\n     */value.match(stringShapeRegex).forEach(function(number,i){outputRanges[i].push(+number);});});/* $FlowFixMe(>=0.18.0): `outputRange[0].match()` can return `null`. Need to\n   * guard against this possibility.\n   */var interpolations=outputRange[0].match(stringShapeRegex).map(function(value,i){return createInterpolation(_objectSpread({},config,{outputRange:outputRanges[i]}));});// rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n// round the opacity (4th column).\nvar shouldRound=isRgbOrRgba(outputRange[0]);return function(input){var i=0;// 'rgba(0, 100, 200, 0)'\n// ->\n// 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\nreturn outputRange[0].replace(stringShapeRegex,function(){var val=+interpolations[i++](input);if(shouldRound){val=i<4?Math.round(val):Math.round(val*1000)/1000;}return String(val);});};}function isRgbOrRgba(range){return typeof range==='string'&&range.startsWith('rgb');}function checkPattern(arr){var pattern=arr[0].replace(stringShapeRegex,'');for(var i=1;i<arr.length;++i){invariant(pattern===arr[i].replace(stringShapeRegex,''),'invalid pattern '+arr[0]+' and '+arr[i]);}}function findRange(input,inputRange){var i;for(i=1;i<inputRange.length-1;++i){if(inputRange[i]>=input){break;}}return i-1;}function checkValidInputRange(arr){invariant(arr.length>=2,'inputRange must have at least 2 elements');for(var i=1;i<arr.length;++i){invariant(arr[i]>=arr[i-1],/* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n     * one or both of the operands may be something that doesn't cleanly\n     * convert to a string, like undefined, null, and object, etc. If you really\n     * mean this implicit string conversion, you can do something like\n     * String(myThing)\n     */'inputRange must be monotonically non-decreasing '+arr);}}function checkInfiniteRange(name,arr){invariant(arr.length>=2,name+' must have at least 2 elements');invariant(arr.length!==2||arr[0]!==-Infinity||arr[1]!==Infinity,/* $FlowFixMe(>=0.13.0) - In the addition expression below this comment,\n   * one or both of the operands may be something that doesn't cleanly convert\n   * to a string, like undefined, null, and object, etc. If you really mean\n   * this implicit string conversion, you can do something like\n   * String(myThing)\n   */name+'cannot be ]-infinity;+infinity[ '+arr);}var AnimatedInterpolation=/*#__PURE__*/function(_AnimatedWithChildren){_inheritsLoose(AnimatedInterpolation,_AnimatedWithChildren);// Export for testing.\nfunction AnimatedInterpolation(parent,config){var _this;_this=_AnimatedWithChildren.call(this)||this;_this._parent=parent;_this._config=config;_this._interpolation=createInterpolation(config);return _this;}var _proto=AnimatedInterpolation.prototype;_proto.__makeNative=function __makeNative(){this._parent.__makeNative();_AnimatedWithChildren.prototype.__makeNative.call(this);};_proto.__getValue=function __getValue(){var parentValue=this._parent.__getValue();invariant(typeof parentValue==='number','Cannot interpolate an input which is not a number.');return this._interpolation(parentValue);};_proto.interpolate=function interpolate(config){return new AnimatedInterpolation(this,config);};_proto.__attach=function __attach(){this._parent.__addChild(this);};_proto.__detach=function __detach(){this._parent.__removeChild(this);_AnimatedWithChildren.prototype.__detach.call(this);};_proto.__transformDataType=function __transformDataType(range){// $FlowFixMe\nreturn range.map(NativeAnimatedHelper.transformDataType);};_proto.__getNativeConfig=function __getNativeConfig(){if(process.env.NODE_ENV!=='production'){NativeAnimatedHelper.validateInterpolation(this._config);}return{inputRange:this._config.inputRange,// Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\noutputRange:this.__transformDataType(this._config.outputRange),extrapolateLeft:this._config.extrapolateLeft||this._config.extrapolate||'extend',extrapolateRight:this._config.extrapolateRight||this._config.extrapolate||'extend',type:'interpolation'};};return AnimatedInterpolation;}(AnimatedWithChildren);AnimatedInterpolation.__createInterpolation=createInterpolation;export default AnimatedInterpolation;","map":null,"metadata":{},"sourceType":"module"}