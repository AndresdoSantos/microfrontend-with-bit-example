{"ast":null,"code":"const DEFAULT_PORT_BY_PROTOCOL={'http:':'80','https:':'443'};const URL_REGEX=/^(https?:)?\\/\\/([^/:]+)?(:(\\d+))?/;const opaqueOriginSchemes=['file:','data:'];/**\n * Converts a src value into an origin.\n */export default(src=>{if(src&&opaqueOriginSchemes.find(scheme=>src.startsWith(scheme))){// The origin of the child document is an opaque origin and its\n// serialization is \"null\"\n// https://html.spec.whatwg.org/multipage/origin.html#origin\nreturn'null';}// Note that if src is undefined, then srcdoc is being used instead of src\n// and we can follow this same logic below to get the origin of the parent,\n// which is the origin that we will need to use.\nconst location=document.location;const regexResult=URL_REGEX.exec(src);let protocol;let hostname;let port;if(regexResult){// It's an absolute URL. Use the parsed info.\n// regexResult[1] will be undefined if the URL starts with //\nprotocol=regexResult[1]?regexResult[1]:location.protocol;hostname=regexResult[2];port=regexResult[4];}else{// It's a relative path. Use the current location's info.\nprotocol=location.protocol;hostname=location.hostname;port=location.port;}// If the port is the default for the protocol, we don't want to add it to the origin string\n// or it won't match the message's event.origin.\nconst portSuffix=port&&port!==DEFAULT_PORT_BY_PROTOCOL[protocol]?`:${port}`:'';return`${protocol}//${hostname}${portSuffix}`;});","map":null,"metadata":{},"sourceType":"module"}