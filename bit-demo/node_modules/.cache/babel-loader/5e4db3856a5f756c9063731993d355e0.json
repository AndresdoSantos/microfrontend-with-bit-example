{"ast":null,"code":"// Spec Section: \"Executable Definitions\"\nimport{ExecutableDefinitions}from'./rules/ExecutableDefinitions';// Spec Section: \"Operation Name Uniqueness\"\nimport{UniqueOperationNames}from'./rules/UniqueOperationNames';// Spec Section: \"Lone Anonymous Operation\"\nimport{LoneAnonymousOperation}from'./rules/LoneAnonymousOperation';// Spec Section: \"Subscriptions with Single Root Field\"\nimport{SingleFieldSubscriptions}from'./rules/SingleFieldSubscriptions';// Spec Section: \"Fragment Spread Type Existence\"\nimport{KnownTypeNames}from'./rules/KnownTypeNames';// Spec Section: \"Fragments on Composite Types\"\nimport{FragmentsOnCompositeTypes}from'./rules/FragmentsOnCompositeTypes';// Spec Section: \"Variables are Input Types\"\nimport{VariablesAreInputTypes}from'./rules/VariablesAreInputTypes';// Spec Section: \"Leaf Field Selections\"\nimport{ScalarLeafs}from'./rules/ScalarLeafs';// Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\nimport{FieldsOnCorrectType}from'./rules/FieldsOnCorrectType';// Spec Section: \"Fragment Name Uniqueness\"\nimport{UniqueFragmentNames}from'./rules/UniqueFragmentNames';// Spec Section: \"Fragment spread target defined\"\nimport{KnownFragmentNames}from'./rules/KnownFragmentNames';// Spec Section: \"Fragments must be used\"\nimport{NoUnusedFragments}from'./rules/NoUnusedFragments';// Spec Section: \"Fragment spread is possible\"\nimport{PossibleFragmentSpreads}from'./rules/PossibleFragmentSpreads';// Spec Section: \"Fragments must not form cycles\"\nimport{NoFragmentCycles}from'./rules/NoFragmentCycles';// Spec Section: \"Variable Uniqueness\"\nimport{UniqueVariableNames}from'./rules/UniqueVariableNames';// Spec Section: \"All Variable Used Defined\"\nimport{NoUndefinedVariables}from'./rules/NoUndefinedVariables';// Spec Section: \"All Variables Used\"\nimport{NoUnusedVariables}from'./rules/NoUnusedVariables';// Spec Section: \"Directives Are Defined\"\nimport{KnownDirectives}from'./rules/KnownDirectives';// Spec Section: \"Directives Are Unique Per Location\"\nimport{UniqueDirectivesPerLocation}from'./rules/UniqueDirectivesPerLocation';// Spec Section: \"Argument Names\"\nimport{KnownArgumentNames,KnownArgumentNamesOnDirectives}from// @internal\n'./rules/KnownArgumentNames';// Spec Section: \"Argument Uniqueness\"\nimport{UniqueArgumentNames}from'./rules/UniqueArgumentNames';// Spec Section: \"Value Type Correctness\"\nimport{ValuesOfCorrectType}from'./rules/ValuesOfCorrectType';// Spec Section: \"Argument Optionality\"\nimport{ProvidedRequiredArguments,ProvidedRequiredArgumentsOnDirectives}from// @internal\n'./rules/ProvidedRequiredArguments';// Spec Section: \"All Variable Usages Are Allowed\"\nimport{VariablesInAllowedPosition}from'./rules/VariablesInAllowedPosition';// Spec Section: \"Field Selection Merging\"\nimport{OverlappingFieldsCanBeMerged}from'./rules/OverlappingFieldsCanBeMerged';// Spec Section: \"Input Object Field Uniqueness\"\nimport{UniqueInputFieldNames}from'./rules/UniqueInputFieldNames';/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */export var specifiedRules=Object.freeze([ExecutableDefinitions,UniqueOperationNames,LoneAnonymousOperation,SingleFieldSubscriptions,KnownTypeNames,FragmentsOnCompositeTypes,VariablesAreInputTypes,ScalarLeafs,FieldsOnCorrectType,UniqueFragmentNames,KnownFragmentNames,NoUnusedFragments,PossibleFragmentSpreads,NoFragmentCycles,UniqueVariableNames,NoUndefinedVariables,NoUnusedVariables,KnownDirectives,UniqueDirectivesPerLocation,KnownArgumentNames,UniqueArgumentNames,ValuesOfCorrectType,ProvidedRequiredArguments,VariablesInAllowedPosition,OverlappingFieldsCanBeMerged,UniqueInputFieldNames]);import{LoneSchemaDefinition}from'./rules/LoneSchemaDefinition';import{UniqueOperationTypes}from'./rules/UniqueOperationTypes';import{UniqueTypeNames}from'./rules/UniqueTypeNames';import{UniqueEnumValueNames}from'./rules/UniqueEnumValueNames';import{UniqueFieldDefinitionNames}from'./rules/UniqueFieldDefinitionNames';import{UniqueDirectiveNames}from'./rules/UniqueDirectiveNames';import{PossibleTypeExtensions}from'./rules/PossibleTypeExtensions';// @internal\nexport var specifiedSDLRules=Object.freeze([LoneSchemaDefinition,UniqueOperationTypes,UniqueTypeNames,UniqueEnumValueNames,UniqueFieldDefinitionNames,UniqueDirectiveNames,KnownTypeNames,KnownDirectives,UniqueDirectivesPerLocation,PossibleTypeExtensions,KnownArgumentNamesOnDirectives,UniqueArgumentNames,UniqueInputFieldNames,ProvidedRequiredArgumentsOnDirectives]);","map":null,"metadata":{},"sourceType":"module"}