{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */'use strict';import NativeAnimatedHelper from'../NativeAnimatedHelper';import invariant from'fbjs/lib/invariant';var NativeAnimatedAPI=NativeAnimatedHelper.API;var _uniqueId=1;// Note(vjeux): this would be better as an interface but flow doesn't\n// support them yet\nvar AnimatedNode=/*#__PURE__*/function(){var _proto=AnimatedNode.prototype;_proto.__attach=function __attach(){};_proto.__detach=function __detach(){if(this.__isNative&&this.__nativeTag!=null){NativeAnimatedHelper.API.dropAnimatedNode(this.__nativeTag);this.__nativeTag=undefined;}};_proto.__getValue=function __getValue(){};_proto.__getAnimatedValue=function __getAnimatedValue(){return this.__getValue();};_proto.__addChild=function __addChild(child){};_proto.__removeChild=function __removeChild(child){};_proto.__getChildren=function __getChildren(){return[];}/* Methods and props used by native Animated impl */;function AnimatedNode(){this._listeners={};}_proto.__makeNative=function __makeNative(){if(!this.__isNative){throw new Error('This node cannot be made a \"native\" animated node');}if(this.hasListeners()){this._startListeningToNativeValueUpdates();}}/**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to\n   * synchronously read the value because it might be driven natively.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#addlistener\n   */;_proto.addListener=function addListener(callback){var id=String(_uniqueId++);this._listeners[id]=callback;if(this.__isNative){this._startListeningToNativeValueUpdates();}return id;}/**\n   * Unregister a listener. The `id` param shall match the identifier\n   * previously returned by `addListener()`.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removelistener\n   */;_proto.removeListener=function removeListener(id){delete this._listeners[id];if(this.__isNative&&!this.hasListeners()){this._stopListeningForNativeValueUpdates();}}/**\n   * Remove all registered listeners.\n   *\n   * See http://facebook.github.io/react-native/docs/animatedvalue.html#removealllisteners\n   */;_proto.removeAllListeners=function removeAllListeners(){this._listeners={};if(this.__isNative){this._stopListeningForNativeValueUpdates();}};_proto.hasListeners=function hasListeners(){return!!Object.keys(this._listeners).length;};_proto._startListeningToNativeValueUpdates=function _startListeningToNativeValueUpdates(){var _this=this;if(this.__nativeAnimatedValueListener&&!this.__shouldUpdateListenersForNewNativeTag){return;}if(this.__shouldUpdateListenersForNewNativeTag){this.__shouldUpdateListenersForNewNativeTag=false;this._stopListeningForNativeValueUpdates();}NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());this.__nativeAnimatedValueListener=NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate',function(data){if(data.tag!==_this.__getNativeTag()){return;}_this._onAnimatedValueUpdateReceived(data.value);});};_proto._onAnimatedValueUpdateReceived=function _onAnimatedValueUpdateReceived(value){this.__callListeners(value);};_proto.__callListeners=function __callListeners(value){for(var _key in this._listeners){this._listeners[_key]({value:value});}};_proto._stopListeningForNativeValueUpdates=function _stopListeningForNativeValueUpdates(){if(!this.__nativeAnimatedValueListener){return;}this.__nativeAnimatedValueListener.remove();this.__nativeAnimatedValueListener=null;NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());};_proto.__getNativeTag=function __getNativeTag(){NativeAnimatedHelper.assertNativeAnimatedModule();invariant(this.__isNative,'Attempt to get native tag from node not marked as \"native\"');if(this.__nativeTag==null){var nativeTag=NativeAnimatedHelper.generateNewNodeTag();this.__nativeTag=nativeTag;NativeAnimatedHelper.API.createAnimatedNode(nativeTag,this.__getNativeConfig());this.__shouldUpdateListenersForNewNativeTag=true;}return this.__nativeTag;};_proto.__getNativeConfig=function __getNativeConfig(){throw new Error('This JS animated node type cannot be used as native animated node');};_proto.toJSON=function toJSON(){return this.__getValue();};return AnimatedNode;}();export default AnimatedNode;","map":null,"metadata":{},"sourceType":"module"}