{"ast":null,"code":"\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;Object.defineProperty(o,k2,{enumerable:true,get:function(){return m[k];}});}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.RootNode=void 0;const react_1=__importStar(require(\"react\"));const recursive_tree_1=require(\"../recursive-tree\");/**\n * renders the initial tree node, handling virtual nodes (nodes without id, that only have children)\n */function RootNode({node,depth=0}){const TreeNodeRenderer=(0,react_1.useContext)(recursive_tree_1.TreeNodeContext);if(node.id){return react_1.default.createElement(TreeNodeRenderer,{node:node,depth:depth});}if(!node.children)return null;return react_1.default.createElement(react_1.default.Fragment,null,node.children.map(rootNode=>react_1.default.createElement(RootNode,{key:rootNode.id,node:rootNode,depth:depth})));}exports.RootNode=RootNode;","map":null,"metadata":{},"sourceType":"module"}