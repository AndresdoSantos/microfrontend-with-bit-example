{"ast":null,"code":"\"use strict\";var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.useLaneComponents=void 0;const ui_foundation_ui_hooks_use_data_query_1=require(\"@teambit/ui-foundation.ui.hooks.use-data-query\");const client_1=require(\"@apollo/client\");const component_1=require(\"@teambit/component\");const GET_LANE_COMPONENTS=(0,client_1.gql)`\n  query LaneComponent($ids: [String!], $extensionId: String) {\n    lanes {\n      id\n      list(ids: $ids) {\n        id {\n          name\n          scope\n        }\n        hash\n        components {\n          ...componentOverviewFields\n        }\n        readmeComponent {\n          ...componentOverviewFields\n        }\n      }\n    }\n    getHost(id: $extensionId) {\n      id\n    }\n  }\n  ${component_1.componentOverviewFields}\n`;function useLaneComponents(laneId){/**\n     * query from context if exists\n     */const _a=(0,ui_foundation_ui_hooks_use_data_query_1.useDataQuery)(GET_LANE_COMPONENTS,{variables:{ids:[laneId===null||laneId===void 0?void 0:laneId.toString()]},skip:!laneId}),{data}=_a,rest=__rest(_a,[\"data\"]);const components=data===null||data===void 0?void 0:data.lanes.list[0].components.map(component=>{const componentModel=component_1.ComponentModel.from(Object.assign(Object.assign({},component),{host:data.getHost.id}));return componentModel;});return Object.assign(Object.assign({},rest),{components});}exports.useLaneComponents=useLaneComponents;","map":null,"metadata":{},"sourceType":"module"}