{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */'use strict';import _bezier from'./bezier';var _ease;/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */var Easing=/*#__PURE__*/function(){function Easing(){}/**\n   * A stepping function, returns 1 for any positive value of `n`.\n   */Easing.step0=function step0(n){return n>0?1:0;}/**\n   * A stepping function, returns 1 if `n` is greater than or equal to 1.\n   */;Easing.step1=function step1(n){return n>=1?1:0;}/**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */;Easing.linear=function linear(t){return t;}/**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */;Easing.ease=function ease(t){if(!_ease){_ease=Easing.bezier(0.42,0,1,1);}return _ease(t);}/**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */;Easing.quad=function quad(t){return t*t;}/**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */;Easing.cubic=function cubic(t){return t*t*t;}/**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */;Easing.poly=function poly(n){return function(t){return Math.pow(t,n);};}/**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */;Easing.sin=function sin(t){return 1-Math.cos(t*Math.PI/2);}/**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */;Easing.circle=function circle(t){return 1-Math.sqrt(1-t*t);}/**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */;Easing.exp=function exp(t){return Math.pow(2,10*(t-1));}/**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */;Easing.elastic=function elastic(bounciness){if(bounciness===void 0){bounciness=1;}var p=bounciness*Math.PI;return function(t){return 1-Math.pow(Math.cos(t*Math.PI/2),3)*Math.cos(t*p);};}/**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */;Easing.back=function back(s){if(s===void 0){s=1.70158;}return function(t){return t*t*((s+1)*t-s);};}/**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */;Easing.bounce=function bounce(t){if(t<1/2.75){return 7.5625*t*t;}if(t<2/2.75){var _t=t-1.5/2.75;return 7.5625*_t*_t+0.75;}if(t<2.5/2.75){var _t2=t-2.25/2.75;return 7.5625*_t2*_t2+0.9375;}var t2=t-2.625/2.75;return 7.5625*t2*t2+0.984375;}/**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */;Easing.bezier=function bezier(x1,y1,x2,y2){return _bezier(x1,y1,x2,y2);}/**\n   * Runs an easing function forwards.\n   */;Easing.in=function _in(easing){return easing;}/**\n   * Runs an easing function backwards.\n   */;Easing.out=function out(easing){return function(t){return 1-easing(1-t);};}/**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */;Easing.inOut=function inOut(easing){return function(t){if(t<0.5){return easing(t*2)/2;}return 1-easing((1-t)*2)/2;};};return Easing;}();export default Easing;","map":null,"metadata":{},"sourceType":"module"}