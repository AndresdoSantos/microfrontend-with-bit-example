{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.tarjan=void 0;const lodash_1=__importDefault(require(\"lodash\"));/**\n * uses the Tarjan algorithm as implemented in graphlib to return all cycles in the graph\n * @param g graph\n */function tarjan(g){var index=0;var stack=[];var visited={};// node id -> { onStack, lowlink, index }\nvar results=[];function dfs(v){var entry=visited[v]={onStack:true,lowlink:index,index:index++};//@ts-ignore\nstack.push(v);let successors=[...g.successorMap(v).keys()];successors.forEach(function(w){if(!lodash_1.default.has(visited,w)){dfs(w);entry.lowlink=Math.min(entry.lowlink,visited[w].lowlink);}else if(visited[w].onStack){entry.lowlink=Math.min(entry.lowlink,visited[w].index);}});if(entry.lowlink===entry.index){var cmpt=[];var w;do{w=stack.pop();visited[w].onStack=false;//@ts-ignore\ncmpt.push(w);}while(v!==w);//@ts-ignore\nresults.push(cmpt);}}[...g.nodeMap.keys()].forEach(function(v){if(!lodash_1.default.has(visited,v)){dfs(v);}});return results;}exports.tarjan=tarjan;","map":null,"metadata":{},"sourceType":"module"}