{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.LaneId=exports.LANE_REMOTE_DELIMITER=exports.DEFAULT_LANE=void 0;const bit_error_1=require(\"@teambit/bit-error\");exports.DEFAULT_LANE='main';exports.LANE_REMOTE_DELIMITER='/';class LaneId{constructor({name,scope}){this.name=name;this.scope=scope;Object.freeze(this);}hasSameName(id){return this.name===id.name;}hasSameScope(id){if(!id.scope&&!this.scope)return true;return this.scope===id.scope;}isEqual(laneId){return this.hasSameName(laneId)&&this.hasSameScope(laneId);}isDefault(){return this.name===exports.DEFAULT_LANE;}toString(){// @todo: remove this \"if\" ASAP, it's for backward compatibility\nif(!this.scope)return this.name;return this.scope+exports.LANE_REMOTE_DELIMITER+this.name;}toObject(){return{scope:this.scope,name:this.name};}static from(name,scope){return new LaneId({scope,name});}static parse(id){if(!id.includes(exports.LANE_REMOTE_DELIMITER)){throw new bit_error_1.BitError(`invalid lane-id, \"${id}\" is missing a delimiter \"(${exports.LANE_REMOTE_DELIMITER})\"`);}const split=id.split(exports.LANE_REMOTE_DELIMITER);if(split.length>2){throw new bit_error_1.BitError(`invalid lane-id \"${id}\". a lane id can have only one \"${exports.LANE_REMOTE_DELIMITER}\"`);}return LaneId.from(split[1],split[0]);}}exports.LaneId=LaneId;","map":null,"metadata":{},"sourceType":"module"}