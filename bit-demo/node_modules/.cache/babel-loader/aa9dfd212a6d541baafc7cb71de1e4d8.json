{"ast":null,"code":"\"use strict\";var _=require(\"../lodash\");module.exports={longestPath:longestPath,slack:slack};/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */function longestPath(g){var visited={};function dfs(v){var label=g.node(v);if(_.has(visited,v)){return label.rank;}visited[v]=true;var rank=_.min(_.map(g.outEdges(v),function(e){return dfs(e.w)-g.edge(e).minlen;}));if(rank===Number.POSITIVE_INFINITY||// return value of _.map([]) for Lodash 3\nrank===undefined||// return value of _.map([]) for Lodash 4\nrank===null){// return value of _.map([null])\nrank=0;}return label.rank=rank;}_.forEach(g.sources(),dfs);}/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */function slack(g,e){return g.node(e.w).rank-g.node(e.v).rank-g.edge(e).minlen;}","map":null,"metadata":{},"sourceType":"module"}