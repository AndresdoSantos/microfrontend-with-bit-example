{"ast":null,"code":"\"use strict\";var __rest=this&&this.__rest||function(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0)t[p]=s[p];if(s!=null&&typeof Object.getOwnPropertySymbols===\"function\")for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++){if(e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i]))t[p[i]]=s[p[i]];}return t;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.SingletonTooltipProvider=void 0;const react_1=__importDefault(require(\"react\"));const react_2=require(\"@tippyjs/react\");const shared_instance_1=require(\"./shared-instance\");const tooltip_1=require(\"./tooltip\");/**\n * create a Popper instance that will be shared with all children tooltip elements, using Tippy's `useSingleton()` hook.\n * Any props will be passed to the Tippy element, which will be rendered beside the children.\n *\n * For more control, use the `Tooltip`, `ProvideTooltipInstance`, components with the `useSingleton` hook directly.\n */function SingletonTooltipProvider(_a){var{children,disabled,overrides}=_a,rest=__rest(_a,[\"children\",\"disabled\",\"overrides\"]);const[tooltipSource,tooltipTarget]=(0,react_2.useSingleton)({disabled,overrides});return react_1.default.createElement(react_1.default.Fragment,null,react_1.default.createElement(tooltip_1.Tooltip,Object.assign({},rest,{singleton:tooltipSource})),react_1.default.createElement(shared_instance_1.ProvideTooltipInstance,{value:tooltipTarget},children));}exports.SingletonTooltipProvider=SingletonTooltipProvider;","map":null,"metadata":{},"sourceType":"module"}