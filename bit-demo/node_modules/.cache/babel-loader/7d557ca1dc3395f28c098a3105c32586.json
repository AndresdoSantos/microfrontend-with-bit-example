{"ast":null,"code":"import{slicedToArray as _slicedToArray,objectWithoutProperties as _objectWithoutProperties}from'../_virtual/_rollupPluginBabelHelpers.js';import state from'state-local';import config$1 from'../config/index.js';import validators from'../validators/index.js';import compose from'../utils/compose.js';import merge from'../utils/deepMerge.js';import makeCancelable from'../utils/makeCancelable.js';/** the local state of the module */var _state$create=state.create({config:config$1,isInitialized:false,resolve:null,reject:null,monaco:null}),_state$create2=_slicedToArray(_state$create,2),getState=_state$create2[0],setState=_state$create2[1];/**\n * set the loader configuration\n * @param {Object} config - the configuration object\n */function config(globalConfig){var _validators$config=validators.config(globalConfig),monaco=_validators$config.monaco,config=_objectWithoutProperties(_validators$config,[\"monaco\"]);setState(function(state){return{config:merge(state.config,config),monaco:monaco};});}/**\n * handles the initialization of the monaco-editor\n * @return {Promise} - returns an instance of monaco (with a cancelable promise)\n */function init(){var state=getState(function(_ref){var monaco=_ref.monaco,isInitialized=_ref.isInitialized,resolve=_ref.resolve;return{monaco:monaco,isInitialized:isInitialized,resolve:resolve};});if(!state.isInitialized){setState({isInitialized:true});if(state.monaco){state.resolve(state.monaco);return makeCancelable(wrapperPromise);}if(window.monaco&&window.monaco.editor){storeMonacoInstance(window.monaco);state.resolve(window.monaco);return makeCancelable(wrapperPromise);}compose(injectScripts,getMonacoLoaderScript)(configureLoader);}return makeCancelable(wrapperPromise);}/**\n * injects provided scripts into the document.body\n * @param {Object} script - an HTML script element\n * @return {Object} - the injected HTML script element\n */function injectScripts(script){return document.body.appendChild(script);}/**\n * creates an HTML script element with/without provided src\n * @param {string} [src] - the source path of the script\n * @return {Object} - the created HTML script element\n */function createScript(src){var script=document.createElement('script');return src&&(script.src=src),script;}/**\n * creates an HTML script element with the monaco loader src\n * @return {Object} - the created HTML script element\n */function getMonacoLoaderScript(configureLoader){var state=getState(function(_ref2){var config=_ref2.config,reject=_ref2.reject;return{config:config,reject:reject};});var loaderScript=createScript(\"\".concat(state.config.paths.vs,\"/loader.js\"));loaderScript.onload=function(){return configureLoader();};loaderScript.onerror=state.reject;return loaderScript;}/**\n * configures the monaco loader\n */function configureLoader(){var state=getState(function(_ref3){var config=_ref3.config,resolve=_ref3.resolve,reject=_ref3.reject;return{config:config,resolve:resolve,reject:reject};});var require=window.require;require.config(state.config);require(['vs/editor/editor.main'],function(monaco){storeMonacoInstance(monaco);state.resolve(monaco);},function(error){state.reject(error);});}/**\n * store monaco instance in local state\n */function storeMonacoInstance(monaco){if(!getState().monaco){setState({monaco:monaco});}}/**\n * internal helper function\n * extracts stored monaco instance\n * @return {Object|null} - the monaco instance\n */function __getMonacoInstance(){return getState(function(_ref4){var monaco=_ref4.monaco;return monaco;});}var wrapperPromise=new Promise(function(resolve,reject){return setState({resolve:resolve,reject:reject});});var loader={config:config,init:init,__getMonacoInstance:__getMonacoInstance};export default loader;","map":null,"metadata":{},"sourceType":"module"}