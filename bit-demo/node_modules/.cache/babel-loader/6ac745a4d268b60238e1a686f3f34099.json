{"ast":null,"code":"/*\nLanguage: Ada\nAuthor: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>\nDescription: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.\n             It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).\n             The first version appeared in the 80s, but it's still actively developed today with\n             the newest standard being Ada2012.\n*/ // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n/** @type LanguageFn */function ada(hljs){// Regular expression for Ada numeric literals.\n// stolen form the VHDL highlighter\n// Decimal literal:\nconst INTEGER_RE='\\\\d(_|\\\\d)*';const EXPONENT_RE='[eE][-+]?'+INTEGER_RE;const DECIMAL_LITERAL_RE=INTEGER_RE+'(\\\\.'+INTEGER_RE+')?'+'('+EXPONENT_RE+')?';// Based literal:\nconst BASED_INTEGER_RE='\\\\w+';const BASED_LITERAL_RE=INTEGER_RE+'#'+BASED_INTEGER_RE+'(\\\\.'+BASED_INTEGER_RE+')?'+'#'+'('+EXPONENT_RE+')?';const NUMBER_RE='\\\\b('+BASED_LITERAL_RE+'|'+DECIMAL_LITERAL_RE+')';// Identifier regex\nconst ID_REGEX='[A-Za-z](_?[A-Za-z0-9.])*';// bad chars, only allowed in literals\nconst BAD_CHARS=`[]\\\\{\\\\}%#'\"`;// Ada doesn't have block comments, only line comments\nconst COMMENTS=hljs.COMMENT('--','$');// variable declarations of the form\n// Foo : Bar := Baz;\n// where only Bar will be highlighted\nconst VAR_DECLS={// TODO: These spaces are not required by the Ada syntax\n// however, I have yet to see handwritten Ada code where\n// someone does not put spaces around :\nbegin:'\\\\s+:\\\\s+',end:'\\\\s*(:=|;|\\\\)|=>|$)',// endsWithParent: true,\n// returnBegin: true,\nillegal:BAD_CHARS,contains:[{// workaround to avoid highlighting\n// named loops and declare blocks\nbeginKeywords:'loop for declare others',endsParent:true},{// properly highlight all modifiers\nclassName:'keyword',beginKeywords:'not null constant access function procedure in out aliased exception'},{className:'type',begin:ID_REGEX,endsParent:true,relevance:0}]};return{name:'Ada',case_insensitive:true,keywords:{keyword:'abort else new return abs elsif not reverse abstract end '+'accept entry select access exception of separate aliased exit or some '+'all others subtype and for out synchronized array function overriding '+'at tagged generic package task begin goto pragma terminate '+'body private then if procedure type case in protected constant interface '+'is raise use declare range delay limited record when delta loop rem while '+'digits renames with do mod requeue xor',literal:'True False'},contains:[COMMENTS,// strings \"foobar\"\n{className:'string',begin:/\"/,end:/\"/,contains:[{begin:/\"\"/,relevance:0}]},// characters ''\n{// character literals always contain one char\nclassName:'string',begin:/'.'/},{// number literals\nclassName:'number',begin:NUMBER_RE,relevance:0},{// Attributes\nclassName:'symbol',begin:\"'\"+ID_REGEX},{// package definition, maybe inside generic\nclassName:'title',begin:'(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?',end:'(is|$)',keywords:'package body',excludeBegin:true,excludeEnd:true,illegal:BAD_CHARS},{// function/procedure declaration/definition\n// maybe inside generic\nbegin:'(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+',end:'(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',keywords:'overriding function procedure with is renames return',// we need to re-match the 'function' keyword, so that\n// the title mode below matches only exactly once\nreturnBegin:true,contains:[COMMENTS,{// name of the function/procedure\nclassName:'title',begin:'(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',end:'(\\\\(|\\\\s+|$)',excludeBegin:true,excludeEnd:true,illegal:BAD_CHARS},// 'self'\n// // parameter types\nVAR_DECLS,{// return type\nclassName:'type',begin:'\\\\breturn\\\\s+',end:'(\\\\s+|;|$)',keywords:'return',excludeBegin:true,excludeEnd:true,// we are done with functions\nendsParent:true,illegal:BAD_CHARS}]},{// new type declarations\n// maybe inside generic\nclassName:'type',begin:'\\\\b(sub)?type\\\\s+',end:'\\\\s+',keywords:'type',excludeBegin:true,illegal:BAD_CHARS},// see comment above the definition\nVAR_DECLS// no markup\n// relevance boosters for small snippets\n// {begin: '\\\\s*=>\\\\s*'},\n// {begin: '\\\\s*:=\\\\s*'},\n// {begin: '\\\\s+:=\\\\s+'},\n]};}module.exports=ada;","map":null,"metadata":{},"sourceType":"module"}