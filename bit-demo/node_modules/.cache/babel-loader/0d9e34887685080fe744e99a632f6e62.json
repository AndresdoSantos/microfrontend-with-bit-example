{"ast":null,"code":"import isObjectLike from'../jsutils/isObjectLike';import{getLocation}from'../language/location';import{printLocation,printSourceLocation}from'../language/printLocation';/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */export function GraphQLError(// eslint-disable-line no-redeclare\nmessage,nodes,source,positions,path,originalError,extensions){// Compute list of blame nodes.\nvar _nodes=Array.isArray(nodes)?nodes.length!==0?nodes:undefined:nodes?[nodes]:undefined;// Compute locations in the source for the given nodes/positions.\nvar _source=source;if(!_source&&_nodes){var node=_nodes[0];_source=node&&node.loc&&node.loc.source;}var _positions=positions;if(!_positions&&_nodes){_positions=_nodes.reduce(function(list,node){if(node.loc){list.push(node.loc.start);}return list;},[]);}if(_positions&&_positions.length===0){_positions=undefined;}var _locations;if(positions&&source){_locations=positions.map(function(pos){return getLocation(source,pos);});}else if(_nodes){_locations=_nodes.reduce(function(list,node){if(node.loc){list.push(getLocation(node.loc.source,node.loc.start));}return list;},[]);}var _extensions=extensions;if(_extensions==null&&originalError!=null){var originalExtensions=originalError.extensions;if(isObjectLike(originalExtensions)){_extensions=originalExtensions;}}Object.defineProperties(this,{message:{value:message,// By being enumerable, JSON.stringify will include `message` in the\n// resulting output. This ensures that the simplest possible GraphQL\n// service adheres to the spec.\nenumerable:true,writable:true},locations:{// Coercing falsey values to undefined ensures they will not be included\n// in JSON.stringify() when not provided.\nvalue:_locations||undefined,// By being enumerable, JSON.stringify will include `locations` in the\n// resulting output. This ensures that the simplest possible GraphQL\n// service adheres to the spec.\nenumerable:Boolean(_locations)},path:{// Coercing falsey values to undefined ensures they will not be included\n// in JSON.stringify() when not provided.\nvalue:path||undefined,// By being enumerable, JSON.stringify will include `path` in the\n// resulting output. This ensures that the simplest possible GraphQL\n// service adheres to the spec.\nenumerable:Boolean(path)},nodes:{value:_nodes||undefined},source:{value:_source||undefined},positions:{value:_positions||undefined},originalError:{value:originalError},extensions:{// Coercing falsey values to undefined ensures they will not be included\n// in JSON.stringify() when not provided.\nvalue:_extensions||undefined,// By being enumerable, JSON.stringify will include `path` in the\n// resulting output. This ensures that the simplest possible GraphQL\n// service adheres to the spec.\nenumerable:Boolean(_extensions)}});// Include (non-enumerable) stack trace.\nif(originalError&&originalError.stack){Object.defineProperty(this,'stack',{value:originalError.stack,writable:true,configurable:true});}else if(Error.captureStackTrace){Error.captureStackTrace(this,GraphQLError);}else{Object.defineProperty(this,'stack',{value:Error().stack,writable:true,configurable:true});}}GraphQLError.prototype=Object.create(Error.prototype,{constructor:{value:GraphQLError},name:{value:'GraphQLError'},toString:{value:function toString(){return printError(this);}}});/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */export function printError(error){var output=error.message;if(error.nodes){for(var _i2=0,_error$nodes2=error.nodes;_i2<_error$nodes2.length;_i2++){var node=_error$nodes2[_i2];if(node.loc){output+='\\n\\n'+printLocation(node.loc);}}}else if(error.source&&error.locations){for(var _i4=0,_error$locations2=error.locations;_i4<_error$locations2.length;_i4++){var location=_error$locations2[_i4];output+='\\n\\n'+printSourceLocation(error.source,location);}}return output;}","map":null,"metadata":{},"sourceType":"module"}