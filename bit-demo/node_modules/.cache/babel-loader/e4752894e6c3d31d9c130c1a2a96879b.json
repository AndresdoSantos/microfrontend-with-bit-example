{"ast":null,"code":"\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;Object.defineProperty(o,k2,{enumerable:true,get:function(){return m[k];}});}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,\"__esModule\",{value:true});exports.ComponentTree=void 0;const component_1=require(\"@teambit/component\");const react_1=__importStar(require(\"react\"));const base_react_navigation_link_1=require(\"@teambit/base-react.navigation.link\");const base_ui_graph_tree_indent_1=require(\"@teambit/base-ui.graph.tree.indent\");const base_ui_graph_tree_inflate_paths_1=require(\"@teambit/base-ui.graph.tree.inflate-paths\");const design_ui_tree_1=require(\"@teambit/design.ui.tree\");const lanes_ui_models_lanes_model_1=require(\"@teambit/lanes.ui.models.lanes-model\");const base_ui_graph_tree_tree_context_1=require(\"@teambit/base-ui.graph.tree.tree-context\");const payload_type_1=require(\"./payload-type\");const default_tree_node_renderer_1=require(\"./default-tree-node-renderer\");function ComponentTree({components,isCollapsed,className,transformTree,// assumeScopeInUrl = false,\nTreeNode=default_tree_node_renderer_1.DefaultTreeNodeRenderer}){const{pathname='/'}=(0,base_react_navigation_link_1.useLocation)()||{};// override default splat from location when viewing a lane component\nconst laneCompUrl=pathname.split(lanes_ui_models_lanes_model_1.LanesModel.baseLaneComponentRoute.concat('/'))[1];const idFromLocation=(0,component_1.useIdFromLocation)(laneCompUrl);const activeComponent=(0,react_1.useMemo)(()=>{const active=components.find(x=>{return idFromLocation&&(idFromLocation===x.id.fullName||idFromLocation===x.id.toStringWithoutVersion());});return active===null||active===void 0?void 0:active.id.toString({ignoreVersion:true});},[components,pathname]);const rootNode=(0,react_1.useMemo)(()=>{const tree=(0,base_ui_graph_tree_inflate_paths_1.inflateToTree)(components,c=>c.id.toString({ignoreVersion:true}));const payloadMap=calcPayload(components);(0,base_ui_graph_tree_inflate_paths_1.attachPayload)(tree,payloadMap);if(transformTree)return transformTree(tree);return tree;},[components]);return react_1.default.createElement(base_ui_graph_tree_tree_context_1.TreeContextProvider,null,react_1.default.createElement(\"div\",{style:(0,base_ui_graph_tree_indent_1.indentStyle)(1),className:className},react_1.default.createElement(design_ui_tree_1.Tree,{TreeNode:TreeNode,activePath:activeComponent,tree:rootNode,isCollapsed:isCollapsed})));}exports.ComponentTree=ComponentTree;function calcPayload(components){const payloadMap=new Map(components.map(c=>[c.id.toString({ignoreVersion:true}),c]));const scopeIds=new Set(components.map(x=>x.id.scope).filter(x=>!!x));scopeIds.forEach(x=>x&&payloadMap.set(`${x}/`,new payload_type_1.ScopePayload()));return payloadMap;}","map":null,"metadata":{},"sourceType":"module"}