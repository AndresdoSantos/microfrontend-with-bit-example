{"ast":null,"code":"import objectValues from'../polyfills/objectValues';import keyMap from'../jsutils/keyMap';import inspect from'../jsutils/inspect';import invariant from'../jsutils/invariant';import isInvalid from'../jsutils/isInvalid';import{Kind}from'../language/kinds';import{isScalarType,isEnumType,isInputObjectType,isListType,isNonNullType}from'../type/definition';/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */export function valueFromAST(valueNode,type,variables){if(!valueNode){// When there is no node, then there is also no value.\n// Importantly, this is different from returning the value null.\nreturn;}if(isNonNullType(type)){if(valueNode.kind===Kind.NULL){return;// Invalid: intentionally return no value.\n}return valueFromAST(valueNode,type.ofType,variables);}if(valueNode.kind===Kind.NULL){// This is explicitly returning the value null.\nreturn null;}if(valueNode.kind===Kind.VARIABLE){var variableName=valueNode.name.value;if(!variables||isInvalid(variables[variableName])){// No valid return value.\nreturn;}var variableValue=variables[variableName];if(variableValue===null&&isNonNullType(type)){return;// Invalid: intentionally return no value.\n}// Note: This does no further checking that this variable is correct.\n// This assumes that this query has been validated and the variable\n// usage here is of the correct type.\nreturn variableValue;}if(isListType(type)){var itemType=type.ofType;if(valueNode.kind===Kind.LIST){var coercedValues=[];for(var _i2=0,_valueNode$values2=valueNode.values;_i2<_valueNode$values2.length;_i2++){var itemNode=_valueNode$values2[_i2];if(isMissingVariable(itemNode,variables)){// If an array contains a missing variable, it is either coerced to\n// null or if the item type is non-null, it considered invalid.\nif(isNonNullType(itemType)){return;// Invalid: intentionally return no value.\n}coercedValues.push(null);}else{var itemValue=valueFromAST(itemNode,itemType,variables);if(isInvalid(itemValue)){return;// Invalid: intentionally return no value.\n}coercedValues.push(itemValue);}}return coercedValues;}var coercedValue=valueFromAST(valueNode,itemType,variables);if(isInvalid(coercedValue)){return;// Invalid: intentionally return no value.\n}return[coercedValue];}if(isInputObjectType(type)){if(valueNode.kind!==Kind.OBJECT){return;// Invalid: intentionally return no value.\n}var coercedObj=Object.create(null);var fieldNodes=keyMap(valueNode.fields,function(field){return field.name.value;});for(var _i4=0,_objectValues2=objectValues(type.getFields());_i4<_objectValues2.length;_i4++){var field=_objectValues2[_i4];var fieldNode=fieldNodes[field.name];if(!fieldNode||isMissingVariable(fieldNode.value,variables)){if(field.defaultValue!==undefined){coercedObj[field.name]=field.defaultValue;}else if(isNonNullType(field.type)){return;// Invalid: intentionally return no value.\n}continue;}var fieldValue=valueFromAST(fieldNode.value,field.type,variables);if(isInvalid(fieldValue)){return;// Invalid: intentionally return no value.\n}coercedObj[field.name]=fieldValue;}return coercedObj;}if(isEnumType(type)){if(valueNode.kind!==Kind.ENUM){return;// Invalid: intentionally return no value.\n}var enumValue=type.getValue(valueNode.value);if(!enumValue){return;// Invalid: intentionally return no value.\n}return enumValue.value;}/* istanbul ignore else */if(isScalarType(type)){// Scalars fulfill parsing a literal value via parseLiteral().\n// Invalid values represent a failure to parse correctly, in which case\n// no value is returned.\nvar result;try{result=type.parseLiteral(valueNode,variables);}catch(_error){return;// Invalid: intentionally return no value.\n}if(isInvalid(result)){return;// Invalid: intentionally return no value.\n}return result;}// Not reachable. All possible input types have been considered.\n/* istanbul ignore next */invariant(false,'Unexpected input type: '+inspect(type));}// Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\nfunction isMissingVariable(valueNode,variables){return valueNode.kind===Kind.VARIABLE&&(!variables||isInvalid(variables[valueNode.name.value]));}","map":null,"metadata":{},"sourceType":"module"}