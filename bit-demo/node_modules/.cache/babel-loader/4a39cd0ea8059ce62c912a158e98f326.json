{"ast":null,"code":"import{forEach,isCollection}from'iterall';import objectValues from'../polyfills/objectValues';import inspect from'../jsutils/inspect';import invariant from'../jsutils/invariant';import isNullish from'../jsutils/isNullish';import isInvalid from'../jsutils/isInvalid';import isObjectLike from'../jsutils/isObjectLike';import{Kind}from'../language/kinds';import{GraphQLID}from'../type/scalars';import{isLeafType,isEnumType,isInputObjectType,isListType,isNonNullType}from'../type/definition';/**\n * Produces a GraphQL Value AST given a JavaScript value.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */export function astFromValue(value,type){if(isNonNullType(type)){var astValue=astFromValue(value,type.ofType);if(astValue&&astValue.kind===Kind.NULL){return null;}return astValue;}// only explicit null, not undefined, NaN\nif(value===null){return{kind:Kind.NULL};}// undefined, NaN\nif(isInvalid(value)){return null;}// Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n// the value is not an array, convert the value using the list's item type.\nif(isListType(type)){var itemType=type.ofType;if(isCollection(value)){var valuesNodes=[];forEach(value,function(item){var itemNode=astFromValue(item,itemType);if(itemNode){valuesNodes.push(itemNode);}});return{kind:Kind.LIST,values:valuesNodes};}return astFromValue(value,itemType);}// Populate the fields of the input object by creating ASTs from each value\n// in the JavaScript object according to the fields in the input type.\nif(isInputObjectType(type)){if(!isObjectLike(value)){return null;}var fieldNodes=[];for(var _i2=0,_objectValues2=objectValues(type.getFields());_i2<_objectValues2.length;_i2++){var field=_objectValues2[_i2];var fieldValue=astFromValue(value[field.name],field.type);if(fieldValue){fieldNodes.push({kind:Kind.OBJECT_FIELD,name:{kind:Kind.NAME,value:field.name},value:fieldValue});}}return{kind:Kind.OBJECT,fields:fieldNodes};}/* istanbul ignore else */if(isLeafType(type)){// Since value is an internally represented value, it must be serialized\n// to an externally represented value before converting into an AST.\nvar serialized=type.serialize(value);if(isNullish(serialized)){return null;}// Others serialize based on their corresponding JavaScript scalar types.\nif(typeof serialized==='boolean'){return{kind:Kind.BOOLEAN,value:serialized};}// JavaScript numbers can be Int or Float values.\nif(typeof serialized==='number'){var stringNum=String(serialized);return integerStringRegExp.test(stringNum)?{kind:Kind.INT,value:stringNum}:{kind:Kind.FLOAT,value:stringNum};}if(typeof serialized==='string'){// Enum types use Enum literals.\nif(isEnumType(type)){return{kind:Kind.ENUM,value:serialized};}// ID types can use Int literals.\nif(type===GraphQLID&&integerStringRegExp.test(serialized)){return{kind:Kind.INT,value:serialized};}return{kind:Kind.STRING,value:serialized};}throw new TypeError(\"Cannot convert value to AST: \".concat(inspect(serialized)));}// Not reachable. All possible input types have been considered.\n/* istanbul ignore next */invariant(false,'Unexpected input type: '+inspect(type));}/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */var integerStringRegExp=/^-?(?:0|[1-9][0-9]*)$/;","map":null,"metadata":{},"sourceType":"module"}