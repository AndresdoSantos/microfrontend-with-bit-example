{"ast":null,"code":"import{useState,useCallback}from'react';import useConstant from'use-constant';/**\r\n * Enables a component state to be either controlled or uncontrolled.\r\n */function useOptionallyControlledState(_ref){var controlledValue=_ref.controlledValue,initialValue=_ref.initialValue,onChange=_ref.onChange;var isControlled=controlledValue!==undefined;var initialIsControlled=useConstant(function(){return isControlled;});var _useState=useState(initialValue),stateValue=_useState[0],setStateValue=_useState[1];if(process.env.NODE_ENV!==\"production\"){if(initialValue===undefined&&controlledValue===undefined){throw new Error('Either an initial or a controlled value should be provided.');}if(initialIsControlled&&!isControlled){throw new Error('Can not change from controlled to uncontrolled mode. If `undefined` needs to be used for controlled values, please use `null` instead.');}if(!initialIsControlled&&isControlled){throw new Error('Can not change from uncontrolled to controlled mode. Please supply an initial value other than `undefined` to make the state controlled over its lifetime. If `undefined` needs to be used for controlled values, please use `null` instead.');}}// Options type ensures that either `controlledValue` or `stateValue` is defined\nvar value=isControlled?controlledValue:stateValue;var onValueChange=useCallback(function(nextValue){if(!isControlled)setStateValue(nextValue);if(onChange)onChange(nextValue);},[onChange,isControlled]);return[value,onValueChange];}export default useOptionallyControlledState;","map":null,"metadata":{},"sourceType":"module"}