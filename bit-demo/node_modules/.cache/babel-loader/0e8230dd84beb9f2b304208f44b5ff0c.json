{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.useQueuedExecution=exports.PromiseCanceledError=void 0;const react_1=require(\"react\");const cancelable_promise_1=require(\"./cancelable-promise\");var cancelable_promise_2=require(\"./cancelable-promise\");Object.defineProperty(exports,\"PromiseCanceledError\",{enumerable:true,get:function(){return cancelable_promise_2.PromiseCanceledError;}});function useQueuedExecution(func){const pendingRef=(0,react_1.useRef)(undefined);return(0,react_1.useCallback)(// @ts-ignore - I couldn't set the parameter/return type\n(...args)=>{if(pendingRef.current){pendingRef.current.cancel();pendingRef.current=undefined;}const result=func(...args);if('then'in result){const cancelable=new cancelable_promise_1.CancelablePromise(result);pendingRef.current=cancelable;return cancelable.promise;}return result;},[func]);}exports.useQueuedExecution=useQueuedExecution;","map":null,"metadata":{},"sourceType":"module"}