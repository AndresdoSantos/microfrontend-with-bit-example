{"ast":null,"code":"'use strict';module.exports=typescript;typescript.displayName='typescript';typescript.aliases=['ts'];function typescript(Prism){;(function(Prism){Prism.languages.typescript=Prism.languages.extend('javascript',{'class-name':{pattern:/(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:true,greedy:true,inside:null// see below\n},builtin:/\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/});// The keywords TypeScript adds to JavaScript\nPrism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,// keywords that have to be followed by an identifier\n/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,// This is for `import type *, {}`\n/\\btype\\b(?=\\s*(?:[\\{*]|$))/);// doesn't work with TS because TS is too complex\ndelete Prism.languages.typescript['parameter'];delete Prism.languages.typescript['literal-property'];// a version of typescript specifically for highlighting types\nvar typeInside=Prism.languages.extend('typescript',{});delete typeInside['class-name'];Prism.languages.typescript['class-name'].inside=typeInside;Prism.languages.insertBefore('typescript','function',{decorator:{pattern:/@[$\\w\\xA0-\\uFFFF]+/,inside:{at:{pattern:/^@/,alias:'operator'},function:/^[\\s\\S]+/}},'generic-function':{// e.g. foo<T extends \"bar\" | \"baz\">( ...\npattern:/#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,greedy:true,inside:{function:/^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,generic:{pattern:/<[\\s\\S]+/,// everything after the first <\nalias:'class-name',inside:typeInside}}}});Prism.languages.ts=Prism.languages.typescript;})(Prism);}","map":null,"metadata":{},"sourceType":"module"}