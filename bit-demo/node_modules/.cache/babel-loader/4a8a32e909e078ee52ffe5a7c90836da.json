{"ast":null,"code":"/**\n * Expose `Backoff`.\n */module.exports=Backoff;/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */function Backoff(opts){opts=opts||{};this.ms=opts.min||100;this.max=opts.max||10000;this.factor=opts.factor||2;this.jitter=opts.jitter>0&&opts.jitter<=1?opts.jitter:0;this.attempts=0;}/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */Backoff.prototype.duration=function(){var ms=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var rand=Math.random();var deviation=Math.floor(rand*this.jitter*ms);ms=(Math.floor(rand*10)&1)==0?ms-deviation:ms+deviation;}return Math.min(ms,this.max)|0;};/**\n * Reset the number of attempts.\n *\n * @api public\n */Backoff.prototype.reset=function(){this.attempts=0;};/**\n * Set the minimum duration\n *\n * @api public\n */Backoff.prototype.setMin=function(min){this.ms=min;};/**\n * Set the maximum duration\n *\n * @api public\n */Backoff.prototype.setMax=function(max){this.max=max;};/**\n * Set the jitter\n *\n * @api public\n */Backoff.prototype.setJitter=function(jitter){this.jitter=jitter;};","map":null,"metadata":{},"sourceType":"module"}